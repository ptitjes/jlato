/*
 * Copyright (C) 2007-2010 JÃºlio Vilmar Gesser.
 * Copyright (C) 2011, 2013-2015 The JavaParser Team.
 * Copyright (C) 2011, 2015 Didier Villevalois.
 *
 * This file is part of JLaTo.
 *
 * JLaTo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JLaTo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with JLaTo.  If not, see <http://www.gnu.org/licenses/>.
 */

options {
  LOOKAHEAD=1;
  STATIC=false;
  JAVA_UNICODE_ESCAPE=true;
  //COMMON_TOKEN_ACTION=true; // Will not use CommonTokenAction to handle JavaDoc and comments
  //SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
  JDK_VERSION = "1.6";
  TOKEN_FACTORY = "ASTParser.GTToken";
}

PARSER_BEGIN(ASTParser)
/*
 * Copyright (C) 2015 Didier Villevalois.
 *
 * This file is part of JLaTo.
 *
 * JLaTo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JLaTo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with JLaTo.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.jlato.parser;

import java.io.*;
import java.util.*;
import org.jlato.tree.*;
import org.jlato.tree.decl.*;
import org.jlato.tree.expr.*;
import org.jlato.tree.name.*;
import org.jlato.tree.stmt.*;
import org.jlato.tree.type.*;
import org.jlato.internal.bu.*;

/**
 * <p>This class was generated automatically by javacc, do not edit.</p>
 */
final class ASTParser {

    void reset(InputStream inputStream, String encoding) {
        ReInit(inputStream, encoding);
    }

    void reset(Reader reader) {
        ReInit(reader);
    }

    private void throwParseException(Token token, String message) throws ParseException {
        StringBuilder buf = new StringBuilder();
        buf.append(message);
        buf.append(": \"");
        buf.append(token.image);
        buf.append("\" at line ");
        buf.append(token.beginLine);
        buf.append(", column ");
        buf.append(token.beginColumn);
        ParseException e = new ParseException(buf.toString());
        e.currentToken = token;
        throw e;
    }

    private Expr generateLambda(Expr ret, Stmt lambdaBody) throws ParseException {
/*	    if (ret instanceof EnclosedExpr) {
	        Expr inner = ((EnclosedExpr) ret).getInner();
	        if (inner != null && inner instanceof Name) {
	            VariableDeclaratorId id = new VariableDeclaratorId(((Name)inner).getName(), 0);
	       	    NodeList params = add(null, new Parameter(0, null, new UnknownType(), false, id));
	            ret = new LambdaExpr(params, lambdaBody, true);
	        } else {
	            ret = new LambdaExpr(null, lambdaBody, true);
	        }
	    } else if (ret instanceof Name) {
		    VariableDeclaratorId id = new VariableDeclaratorId(((Name)ret).getName(), 0);
	        NodeList params = add(null, new Parameter(0, null, new UnknownType(), false, id));
	        ret = new LambdaExpr(params, lambdaBody, false);
	    } else if (ret instanceof LambdaExpr) {
	        ((LambdaExpr) ret).setBody(lambdaBody);
	        ret.setEndLine(lambdaBody.getEndLine());
	        ret.setEndColumn(lambdaBody.getEndColumn());
	    } else {
	        throw new ParseException("Failed to parse lambda Expr! Please create an issue at https://github.com/javaparser/javaparser/issues");
	    }
	    return ret;*/
	    return null;
    }
    
    static final class GTToken extends Token {

        int realKind = ASTParserConstants.GT;

        GTToken(int kind, String image) {
            this.kind = kind;
            this.image = image;
        }

        public static Token newToken(int kind, String image) {
            return new GTToken(kind, image);
        }
    }

    private Token last_special_token = null;

}

PARSER_END(ASTParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  <WHITESPACE: (" " | "\t")+ >
}

SPECIAL_TOKEN :
{
  <NEWLINE: ("\n" | "\r" | "\f" | "\r\n") >
}

/* COMMENTS */

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* >
}

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_JAVA_DOC_COMMENT
|
  <"/*"> : IN_MULTI_LINE_COMMENT
}

<IN_JAVA_DOC_COMMENT>
SPECIAL_TOKEN :
{
  <JAVA_DOC_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_JAVA_DOC_COMMENT, IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < LONG_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])
      | <HEX_LITERAL> (["l","L"])
      | <OCTAL_LITERAL> (["l","L"])
      | <BINARY_LITERAL> (["l","L"])
  >
|
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
      | <BINARY_LITERAL>
  >
|
  < #DECIMAL_LITERAL: (["0"-"9"]((["0"-"9","_"])*["0"-"9"])?) >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"]((["0"-"9","a"-"f","A"-"F","_"])*["0"-"9","a"-"f","A"-"F"])?) >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"]((["0"-"7","_"])*["0"-"7"])?) >
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0","1"]((["0","1","_"])*["0","1"])?) >
|
  < FLOAT_LITERAL:
        <DECIMAL_FLOAT_LITERAL>
      | <HEXADECIMAL_FLOAT_LITERAL>
  >
|
  < DOUBLE_LITERAL:
        <DECIMAL_DOUBLE_LITERAL>
      | <HEXADECIMAL_DOUBLE_LITERAL>
  >
|
  < #FLOAT_SUFFIX: ["f","F"] >
|
  < #DOUBLE_SUFFIX: ["d","D"] >
|
  < #DECIMAL_FLOAT_LITERAL:
        (<DECIMAL_LITERAL>)+ "." (<DECIMAL_LITERAL>)* (<DECIMAL_EXPONENT>)? <FLOAT_SUFFIX>
      | "." (<DECIMAL_LITERAL>)+ (<DECIMAL_EXPONENT>)? <FLOAT_SUFFIX>
      | (<DECIMAL_LITERAL>)+ <DECIMAL_EXPONENT> <FLOAT_SUFFIX>
      | (<DECIMAL_LITERAL>)+ (<DECIMAL_EXPONENT>)? <FLOAT_SUFFIX>
  >
|
  < #DECIMAL_DOUBLE_LITERAL:
        (<DECIMAL_LITERAL>)+ "." (<DECIMAL_LITERAL>)* (<DECIMAL_EXPONENT>)? (<DOUBLE_SUFFIX>)?
      | "." (<DECIMAL_LITERAL>)+ (<DECIMAL_EXPONENT>)? (<DOUBLE_SUFFIX>)?
      | (<DECIMAL_LITERAL>)+ <DECIMAL_EXPONENT> (<DOUBLE_SUFFIX>)?
      | (<DECIMAL_LITERAL>)+ (<DECIMAL_EXPONENT>)? <DOUBLE_SUFFIX>
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (<DECIMAL_LITERAL>)+ >
|
  < #HEXADECIMAL_FLOAT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> <FLOAT_SUFFIX>
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> <FLOAT_SUFFIX>
  >
|
  < #HEXADECIMAL_DOUBLE_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (<DOUBLE_SUFFIX>)?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (<DOUBLE_SUFFIX>)?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "\u0024",          // "$"
         "\u0041"-"\u005a", // "A"-"Z"
         "\u005f",          // "_"
         "\u0061"-"\u007a", // "a"-"z"
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u0236",
         "\u0250"-"\u02c1",
         "\u02c6"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03f5",
         "\u03f7"-"\u03fb",
         "\u0400"-"\u0481",
         "\u048a"-"\u04ce",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0500"-"\u050f",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u066e"-"\u066f",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06ee"-"\u06ef",
         "\u06fa"-"\u06fc",
         "\u06ff",
         "\u0710",
         "\u0712"-"\u072f",
         "\u074d"-"\u074f",
         "\u0780"-"\u07a5",
         "\u07b1",
         "\u0904"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bd",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0"-"\u0ae1",
         "\u0af1",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b35"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b71",
         "\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bf9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbd",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f8",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u16ee"-"\u16f0",
         "\u1700"-"\u170c",
         "\u170e"-"\u1711",
         "\u1720"-"\u1731",
         "\u1740"-"\u1751",
         "\u1760"-"\u176c",
         "\u176e"-"\u1770",
         "\u1780"-"\u17b3",
         "\u17d7",
         "\u17db"-"\u17dc",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1900"-"\u191c",
         "\u1950"-"\u196d",
         "\u1970"-"\u1974",
         "\u1d00"-"\u1d6b",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u2054",
         "\u2071",
         "\u207f",
         "\u20a0"-"\u20b1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u213d"-"\u213f",
         "\u2145"-"\u2149",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303c",
         "\u3041"-"\u3096",
         "\u309d"-"\u309f",
         "\u30a1"-"\u30ff",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u31f0"-"\u31ff",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\ud801", //for supplementary characters suport
         "\ud802", //for supplementary characters suport
         "\uf900"-"\ufa2d",
         "\ufa30"-"\ufa6a",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfc",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "\u0024",          // "$"
         "\u0030"-"\u0039", // "0"-"9"
         "\u0041"-"\u005a", // "A"-"Z"
         "\u005f",          // "_"
         "\u0061"-"\u007a", // "a"-"z"
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00ad",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u0236",
         "\u0250"-"\u02c1",
         "\u02c6"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u0357",
         "\u035d"-"\u036f",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03f5",
         "\u03f7"-"\u03fb",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048a"-"\u04ce",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0500"-"\u050f",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0600"-"\u0603",
         "\u0610"-"\u0615",
         "\u0621"-"\u063a",
         "\u0640"-"\u0658",
         "\u0660"-"\u0669",
         "\u066e"-"\u06d3",
         "\u06d5"-"\u06dd",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06fc",
         "\u06ff",
         "\u070f"-"\u074a",
         "\u074d"-"\u074f",
         "\u0780"-"\u07b1",
         "\u0901"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a01"-"\u0a03",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0"-"\u0ae3",
         "\u0ae6"-"\u0aef",
         "\u0af1",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b35"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b71",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0bf9",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbc"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f8",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u16ee"-"\u16f0",
         "\u1700"-"\u170c",
         "\u170e"-"\u1714",
         "\u1720"-"\u1734",
         "\u1740"-"\u1753",
         "\u1760"-"\u176c",
         "\u176e"-"\u1770",
         "\u1772"-"\u1773",
         "\u1780"-"\u17d3",
         "\u17d7",
         "\u17db"-"\u17dd",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180d",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1900"-"\u191c",
         "\u1920"-"\u192b",
         "\u1930"-"\u193b",
         "\u1946"-"\u196d",
         "\u1970"-"\u1974",
         "\u1d00"-"\u1d6b",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u2054",
         "\u2060"-"\u2063",
         "\u206a"-"\u206f",
         "\u2071",
         "\u207f",
         "\u20a0"-"\u20b1",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u20e5"-"\u20ea",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u213d"-"\u213f",
         "\u2145"-"\u2149",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303c",
         "\u3041"-"\u3096",
         "\u3099"-"\u309a",
         "\u309d"-"\u309f",
         "\u30a1"-"\u30ff",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u31f0"-"\u31ff",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\ud801", //for supplementary characters suport
         "\ud802", //for supplementary characters suport
         "\ud834", //for supplementary characters suport
         "\udc00", //for supplementary characters suport
         "\udc01", //for supplementary characters suport
         "\udd7b", //for supplementary characters suport
         "\uf900"-"\ufa2d",
         "\ufa30"-"\ufa6a",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfc",
         "\ufe00"-"\ufe0f",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < ARROW: "->" >
| < DOUBLECOLON : "::">
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((ASTParser.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((ASTParser.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

CompilationUnit CompilationUnit():
{
	PackageDecl packageDecl = null;
	NodeList imports = new NodeList();
	ImportDecl importDecl = null;
	NodeList types = new NodeList();
	TypeDecl typeDecl = null;
}
{
  [ LOOKAHEAD(PackageDecl()) packageDecl = PackageDecl() ]
  ( importDecl = ImportDecl() { imports = imports.append(importDecl); } )*
  ( typeDecl = TypeDecl() { types = types.append(typeDecl); } )*
  (<EOF> | "\u001A" /** ctrl+z char **/)
  { return new CompilationUnit(packageDecl, imports, types); }
}

PackageDecl PackageDecl():
{
	NodeList<AnnotationExpr> annotations = null;
	QName name;
}
{
  annotations = Annotations()
  "package"  name = QName() ";"
  { return new PackageDecl(annotations, name); }
}

ImportDecl ImportDecl():
{
	QName name;
	boolean isStatic = false;
	boolean isAsterisk = false;
}
{
  "import" [ "static" { isStatic = true; } ] name = QName() [ "." "*" { isAsterisk = true; } ] ";"
  { return new ImportDecl(name, isStatic, isAsterisk); }
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

Modifiers Modifiers():
{
    NodeList<Modifier> modifiers = new NodeList<Modifier>();
    NodeList<AnnotationExpr> annotations = new NodeList<AnnotationExpr>();
    AnnotationExpr ann;
}
{
 (
  LOOKAHEAD(2)
  (
   "public" { modifiers = modifiers.append(Modifier.Public); }
  |
   "protected" { modifiers = modifiers.append(Modifier.Protected); }
  |
   "private" { modifiers = modifiers.append(Modifier.Private); }
  |
   "abstract" { modifiers = modifiers.append(Modifier.Abstract); }
  |
   "default" { modifiers = modifiers.append(Modifier.Default); }
  |
   "static" { modifiers = modifiers.append(Modifier.Static); }
  |
   "final" { modifiers = modifiers.append(Modifier.Final); }
  |
   "transient" { modifiers = modifiers.append(Modifier.Transient); }
  |
   "volatile" { modifiers = modifiers.append(Modifier.Volatile); }
  |
   "synchronized" { modifiers = modifiers.append(Modifier.Synchronized); }
  |
   "native" { modifiers = modifiers.append(Modifier.Native); }
  |
   "strictfp" { modifiers = modifiers.append(Modifier.StrictFP); }
  |
   ann = Annotation() { annotations = annotations.append(ann); }
  )
 )*
 { return modifiers.isEmpty() && annotations.isEmpty() ? null : new Modifiers(modifiers, annotations); }
}

/*
 * Decl syntax follows.
 */
TypeDecl TypeDecl():
{
   Modifiers modifiers;
   TypeDecl ret;
}
{
  {  }
  (
    ";" { ret = new EmptyTypeDecl(); }
  |
    modifiers = Modifiers()
    (
       ret = ClassOrInterfaceDecl(modifiers)
     |
       ret = EnumDecl(modifiers)
     |
       ret = AnnotationTypeDecl(modifiers)
    )
  )
  { return ret; }
}


TypeDecl ClassOrInterfaceDecl(Modifiers modifiers):
{
   TypeDecl.TypeKind typeKind;
   Name name;
   NodeList typePar = null;
   NodeList extList = null;
   NodeList implementsClause = null;
   NodeList members;
}
{
  ( "class" { typeKind = TypeDecl.TypeKind.Class; } | "interface" { typeKind = TypeDecl.TypeKind.Interface; } )
  name = Name()
  [ typePar = TypeParameters() ]
  [ extList = ExtendsList(typeKind) ]
  [ implementsClause = ImplementsList(typeKind) ]
  members = ClassOrInterfaceBody(typeKind)

  { return new TypeDecl(typeKind, modifiers, name, typePar, extList, implementsClause, members); }
}

NodeList ExtendsList(TypeDecl.TypeKind typeKind):
{
   boolean extendsMoreThanOne = false;
   NodeList ret = new NodeList();
   ClassOrInterfaceType cit;
   NodeList<AnnotationExpr> annotations = null;
}
{
   "extends" annotations = Annotations() cit = ClassOrInterfaceType(annotations) { ret = ret.append(cit); }
   ( "," annotations = Annotations() cit = ClassOrInterfaceType(annotations) { ret = ret.append(cit); } )*
   {
      if (ret.size() > 1 && typeKind == TypeDecl.TypeKind.Class)
         throwParseException(token, "A class cannot extend more than one other class");
   }
   { return ret; }
}

NodeList ImplementsList(TypeDecl.TypeKind typeKind):
{
   NodeList ret = new NodeList();
   ClassOrInterfaceType cit;
   NodeList<AnnotationExpr> annotations = null;
}
{
   "implements" annotations = Annotations() cit = ClassOrInterfaceType(annotations) { ret = ret.append(cit); }
   ( "," annotations = Annotations() cit = ClassOrInterfaceType(annotations) { ret = ret.append(cit); } )*
   {
      if (typeKind == TypeDecl.TypeKind.Interface)
         throwParseException(token, "An interface cannot implement other interfaces");
   }
   { return ret; }
}

TypeDecl EnumDecl(Modifiers modifiers):
{
	Name name;
	NodeList implementsClause = new NodeList();
	EnumConstantDecl entry;
	Decl member;
	NodeList members = new NodeList();
}
{
  "enum" name = Name() [ implementsClause = ImplementsList(TypeDecl.TypeKind.Enum) ]
  "{"
  	[
    	entry = EnumConstantDecl() { members = members.append(entry); } ( LOOKAHEAD(2) "," entry = EnumConstantDecl() { members = members.append(entry); } )*
  	]
  	[ "," ]
 	[
 	 	( ";" ( member = ClassOrInterfaceBodyDecl(TypeDecl.TypeKind.Enum) { members = members.append(member); } )* )
 	]
  "}"
  { return TypeDecl.ofEnum(modifiers, name, implementsClause, members); }
}


EnumConstantDecl EnumConstantDecl():
{
	Modifiers modifiers = null;
	Name name;
	NodeList args = null;
	NodeList classBody = null;
}
{
  modifiers = Modifiers() name = Name()
  [ args = Arguments() ] [ classBody = ClassOrInterfaceBody(TypeDecl.TypeKind.Class) ]
  {
      return new EnumConstantDecl(modifiers, name, args, classBody);
  }
}

NodeList TypeParameters():
{
	NodeList ret = new NodeList();
	TypeParameter tp;
	NodeList<AnnotationExpr> annotations = null;
}
{
   "<"
   annotations = Annotations() tp = TypeParameter(annotations) { ret = ret.append(tp); }
   ( "," annotations = Annotations() tp = TypeParameter(annotations) { ret = ret.append(tp); } )*
   ">"
   { return ret; }
}

TypeParameter TypeParameter(NodeList<AnnotationExpr> annotations):
{
	Name name;
	NodeList typeBounds = null;
}
{
   name = Name() [ typeBounds = TypeBounds() ]
   { return new TypeParameter(annotations, name, typeBounds); }
}

NodeList TypeBounds():
{
	NodeList ret = new NodeList();
	ClassOrInterfaceType cit;
	NodeList<AnnotationExpr> annotations = null;
}
{
   "extends" annotations = Annotations() cit = ClassOrInterfaceType(annotations) { ret = ret.append(cit); }
   ( "&" annotations = Annotations() cit = ClassOrInterfaceType(annotations) { ret = ret.append(cit); } )*
   { return ret; }
}

NodeList ClassOrInterfaceBody(TypeDecl.TypeKind typeKind):
{
	NodeList ret = new NodeList();
	Decl member;
}
{
  "{" ( member = ClassOrInterfaceBodyDecl(typeKind) { ret = ret.append(member); }  )* "}"
  { return ret; }
}

Decl ClassOrInterfaceBodyDecl(TypeDecl.TypeKind typeKind):
{
   boolean isNestedInterface = false;
   Modifiers modifiers;
   int aux = 0;
   Decl ret;
   boolean isDefault = false;
}
{
  (
	  LOOKAHEAD( Modifiers() Block() ) ret = InitializerDecl()
	  {
	     if (typeKind == TypeDecl.TypeKind.Interface)
	        throwParseException(token, "An interface cannot have initializers");
	  }
	|
	  modifiers = Modifiers()
	  {
	    if (modifiers != null && modifiers.modifiers().contains(Modifier.Default) && typeKind != TypeDecl.TypeKind.Interface)
	      throwParseException(token, "Only interfaces can have default members");
	  }
	  (
	      ret = ClassOrInterfaceDecl(modifiers)
	    |
	      ret = EnumDecl(modifiers)
	    |
	      ret = AnnotationTypeDecl(modifiers)
	    |
	      LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
	      ret = ConstructorDecl(modifiers)
	    |
	      LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
	      ret = FieldDecl(modifiers)
	    |
	      ret = MethodDecl(modifiers)
	  )
	|
	  ";" { ret = new EmptyMemberDecl(); }
  )
  { return ret; }
}

FieldDecl FieldDecl(Modifiers modifiers):
{
	Type type;
	NodeList variables = new NodeList();
	VariableDeclarator val;
}
{
  // Modifiers are already matched in the caller
  type = Type(null)
        val = VariableDeclarator() { variables = variables.append(val); }
  ( "," val = VariableDeclarator() { variables = variables.append(val); } )*
  ";"
  {
  	return new FieldDecl(modifiers, type, variables);
  }
}

LocalVariableDecl VariableDecl(Modifiers modifiers):
{
	Type type;
	NodeList variables = new NodeList();
	VariableDeclarator val;
}
{
  // Modifiers are already matched in the caller
  type = Type(null)
        val = VariableDeclarator() { variables = variables.append(val); }
  ( "," val = VariableDeclarator() { variables = variables.append(val); } )*

  {
  	return new LocalVariableDecl(modifiers, type, variables);
  }
}

VariableDeclarator VariableDeclarator():
{
	VariableDeclaratorId id;
	Expr init = null;
}
{
  id = VariableDeclaratorId() [ "=" init = VariableInitializer() ]
  { return new  VariableDeclarator(id, init); }
}

VariableDeclaratorId VariableDeclaratorId():
{
	Name name;
	NodeList arrayDims;
}
{
  name = Name() arrayDims = ArrayDims()
  { return new VariableDeclaratorId(name, arrayDims); }
}

NodeList ArrayDims():
{
	NodeList arrayDims = new NodeList();
	NodeList<AnnotationExpr> annotations = null;
}
{
  ( annotations = Annotations() "[" "]" { arrayDims = arrayDims.append(new ArrayDim(annotations)); } )*
  { return arrayDims; }
}

Expr VariableInitializer():
{
	Expr ret;
}
{
  (
	  ret = ArrayInitializer()
	|
	  ret = Expression()
  )
  { return ret;}
}

ArrayInitializerExpr ArrayInitializer():
{
	NodeList values = new NodeList();
	Expr val;
}
{
  "{" [ val = VariableInitializer() { values = values.append(val); } ( LOOKAHEAD(2) "," val = VariableInitializer() { values = values.append(val); } )* ] [ "," ] "}"
  { return new ArrayInitializerExpr(values); }
}

MethodDecl MethodDecl(Modifiers modifiers):
{
	NodeList typeParameters = null;
	Type type;
	Name name;
	NodeList parameters;
	NodeList arrayDims;
	NodeList throwsClause = null;
	BlockStmt block = null;
}
{
  [ typeParameters = TypeParameters() ]
  type = ResultType()
  name = Name() "(" parameters = FormalParameterList() ")" arrayDims = ArrayDims()
  [ "throws" throwsClause = ClassOrInterfaceTypeList() ]
  (
    block = Block()
    {
      if(modifiers != null && modifiers.modifiers().contains(Modifier.Default))
	    throwParseException(token, "\"default\" methods must have a body");
	}
  |
    ";"
  )
  { return new MethodDecl(modifiers, typeParameters, type, name, parameters, arrayDims, throwsClause, block); }
}

NodeList FormalParameterList():
{
	NodeList ret = new NodeList();
	Parameter par;
}
{
  [ par = FormalParameter() { ret = ret.append(par); } ( "," par = FormalParameter() { ret = ret.append(par); } )* ]
  { return ret; }
}

Parameter FormalParameter():
{
	Modifiers modifiers;
	Type type;
	boolean isVarArg = false;
	VariableDeclaratorId id;
}
{
  modifiers = Modifiers() type = Type(null) [ "..." { isVarArg = true;} ] id = VariableDeclaratorId()
  {
    return new Parameter(modifiers, type, isVarArg, id);
  }
}

ConstructorDecl ConstructorDecl(Modifiers modifiers):
{
	NodeList typeParameters = null;
	Name name;
	NodeList parameters;
	NodeList throwsClause = null;
	ExplicitConstructorInvocationStmt exConsInv = null;
	NodeList stmts;
}
{
  [ typeParameters = TypeParameters() ]
  // Modifiers matched in the caller
  name = Name() "(" parameters = FormalParameterList() ")" [ "throws" throwsClause = ClassOrInterfaceTypeList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) exConsInv = ExplicitConstructorInvocation() ]
    stmts = Statements()
  "}"
  {
  	if (exConsInv != null) stmts = stmts.prepend(exConsInv);
  	return new ConstructorDecl(modifiers, typeParameters, name, parameters, throwsClause, new BlockStmt(stmts));
  }
}

ExplicitConstructorInvocationStmt ExplicitConstructorInvocation():
{
	boolean isThis = false;
	NodeList args;
	Expr expr = null;
	NodeList typeArgs = null;
}
{
  (
	  LOOKAHEAD([ TypeArguments() ] <THIS> "(")
	  [ typeArgs = TypeArguments() ]
	  <THIS> { isThis = true; }
	  args = Arguments() ";"
	|
	  [
	    LOOKAHEAD( PrimaryExpressionWithoutSuperSuffix() "." )
	  	expr = PrimaryExpressionWithoutSuperSuffix() "."
	  ]
	  [ typeArgs = TypeArguments() ]
	  <SUPER>
	  args = Arguments() ";"
  )
  { return new ExplicitConstructorInvocationStmt(typeArgs, isThis, expr, args); }
}

NodeList Statements():
{
	NodeList ret = new NodeList();
	Stmt stmt;
}
{
	( LOOKAHEAD(2) stmt = BlockStatement() { ret = ret.append(stmt); } )*
	{ return ret; }
}

InitializerDecl InitializerDecl():
{
	Modifiers modifiers;
	BlockStmt block;
}
{
  modifiers = Modifiers() block = Block()
  { return new InitializerDecl(modifiers, block); }
}


/*
 * Type, name and Expr syntax follows.
 */

Type Type(NodeList<AnnotationExpr> annotations):
{
	Type ret;
}
{
 (
   LOOKAHEAD(2) ret = ReferenceType(annotations)
 |
   ret = PrimitiveType(annotations)
 )
 { return ret; }
}

ReferenceType ReferenceType(NodeList<AnnotationExpr> annotations):
{
	ReferenceType type;
}
{
  ( LOOKAHEAD( ( PrimitiveType() | ClassOrInterfaceType() ) ArrayTypeDims() ) type = ArrayType(annotations) | type = ClassOrInterfaceType(annotations) )
  { return type; }
}

ArrayType ArrayType(NodeList<AnnotationExpr> annotations):
{
	Type type;
}
{
  ( type = PrimitiveType(annotations) | type = ClassOrInterfaceType(annotations) ) type = ArrayTypeDims(type)
  { return (ArrayType) type; }
}

ArrayType ArrayTypeDims(Type componentType):
{
    Type type = null;
	NodeList<AnnotationExpr> annotations = null;
}
{
  annotations = Annotations() "[" "]" ( LOOKAHEAD( Annotations() "[" "]" ) type = ArrayTypeDims(componentType) )?
  { return new ArrayType(annotations, type == null ? componentType : type); }
}

ClassOrInterfaceType ClassOrInterfaceType(NodeList<AnnotationExpr> annotations):
{
	ClassOrInterfaceType ret;
	Name name;
	NodeList typeArgs = null;
}
{
  name = Name()
  [ LOOKAHEAD(2) typeArgs = TypeArguments() ]
  { ret = new ClassOrInterfaceType(annotations, null, name, typeArgs); }
  (
	  LOOKAHEAD(2) "." annotations = Annotations() name = Name()
	  [ LOOKAHEAD(2) typeArgs = TypeArguments() ] { ret = new ClassOrInterfaceType(annotations, ret, name, typeArgs); }
  )*
  { return ret; }
}

NodeList TypeArguments():
{
	NodeList ret = new NodeList();
	Type type;
}
{
   (
     "<"
     type = TypeArgument() { ret = ret.append(type); } ( "," type = TypeArgument() { ret = ret.append(type); } )*
     ">"
   )
   { return ret; }
 |
   "<>"
   { return ret; }
}

Type TypeArgument():
{
	Type ret;
	NodeList<AnnotationExpr> annotations = null;
}
{
  annotations = Annotations()
 (
   ret = ReferenceType(annotations)
 |
   ret = Wildcard(annotations)
 )
 { return ret; }
}

WildcardType Wildcard(NodeList<AnnotationExpr> annotations):
{
	ReferenceType ext = null;
	ReferenceType sup = null;
	NodeList boundAnnotations = null;
}
{
   "?"
   [
		"extends" boundAnnotations = Annotations() ext = ReferenceType(boundAnnotations)
	|
		"super" boundAnnotations = Annotations() sup = ReferenceType(boundAnnotations)
   ]
   { 
     return new WildcardType(annotations, ext, sup);
   }
}

PrimitiveType PrimitiveType(NodeList<AnnotationExpr> annotations):
{
	PrimitiveType.Primitive primitive;
}
{
  (
    "boolean" { primitive = PrimitiveType.Primitive.Boolean; }
  |
    "char" { primitive = PrimitiveType.Primitive.Char; }
  |
    "byte" { primitive = PrimitiveType.Primitive.Byte; }
  |
    "short" { primitive = PrimitiveType.Primitive.Short; }
  |
    "int" { primitive = PrimitiveType.Primitive.Int; }
  |
    "long" { primitive = PrimitiveType.Primitive.Long; }
  |
    "float" { primitive = PrimitiveType.Primitive.Float; }
  |
    "double" { primitive = PrimitiveType.Primitive.Double; }
  )
  {
  }
  { return new PrimitiveType(annotations, primitive); }
}

Type ResultType():
{
	Type ret;
}
{
  (
	  "void" { ret = new VoidType(); }
	|
	  ret = Type(null)
  )
  { return ret; }
}

NodeList ClassOrInterfaceTypeList():
{
	NodeList ret = new NodeList();
	ClassOrInterfaceType type;
	NodeList<AnnotationExpr> annotations= null;
}
{
  annotations = Annotations() type = ClassOrInterfaceType(annotations) { ret = ret.append(type); }  ( "," annotations = Annotations() type = ClassOrInterfaceType(annotations) { ret = ret.append(type); } )*

  { return ret; }
}

QName QName():
{
	QName ret = null;
	Name name;
}
{
  name = Name() { ret = new QName(ret, name); }
  ( LOOKAHEAD("." Name()) "." name = Name() { ret = new QName(ret, name); } )*
  { return ret; }
}

Name Name(): {}
{
  <IDENTIFIER>
  { return new Name(token.image); }
}

/*
 * Expr syntax follows.
 */

Expr Expression():
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional Expr whereas it can only be
 * a primary Expr.  Consider adding a semantic predicate to work
 * around this.
 */
{
	Expr ret;
	AssignExpr.AssignOp op;
	Expr value;
	Stmt lambdaBody = null;
	NodeList params = null;
	NodeList typeArgs = null;
	VariableDeclaratorId id = null;
	Expr inner = null;
}
{
  (
    LOOKAHEAD( LambdaExpression() ) ret = LambdaExpression()
  |
    ret = ConditionalExpression()
    [ LOOKAHEAD(2) op = AssignmentOperator() value = Expression() { ret = new AssignExpr(ret, op, value); } ]
  )
  { return ret; }
}

LambdaExpr LambdaExpression():
{
  NodeList parameters;
  BlockStmt block;
  Expr expr;
  LambdaExpr ret;
}
{
  parameters = LambdaParameters()
  "->"
  (
    expr = Expression() { ret = new LambdaExpr(parameters, expr); }
  |
    block = Block() { ret = new LambdaExpr(parameters, block); }
  )
  { return ret; }
}

NodeList LambdaParameters():
{
  NodeList ret;
  Name name;
}
{
  (
    name = Name() { ret = new NodeList(new Parameter(null, new UnknownType(), false, new VariableDeclaratorId(name, null))); }
  |
    "("
    (
      LOOKAHEAD(InferredFormalParameterList()) ret = InferredFormalParameterList()
    |
      ret = FormalParameterList()
    )
    ")"
  )
  { return ret; }
}

NodeList InferredFormalParameterList():
{
  NodeList ret = new NodeList();
  Name name;
}
{
  name = Name() { ret = ret.append(new Parameter(null, new UnknownType(), false, new VariableDeclaratorId(name, null))); }
  (
    "," name = Name() { ret = ret.append(new Parameter(null, new UnknownType(), false, new VariableDeclaratorId(name, null))); }
  )*
  { return ret; }
}

AssignExpr.AssignOp AssignmentOperator():
{
	AssignExpr.AssignOp ret;
}
{
  (
      "="    { ret = AssignExpr.AssignOp.Normal; }
    | "*="   { ret = AssignExpr.AssignOp.Times; }
    | "/="   { ret = AssignExpr.AssignOp.Divide; }
    | "%="   { ret = AssignExpr.AssignOp.Remainder; }
    | "+="   { ret = AssignExpr.AssignOp.Plus; }
    | "-="   { ret = AssignExpr.AssignOp.Minus; }
    | "<<="  { ret = AssignExpr.AssignOp.LeftShift; }
    | ">>="  { ret = AssignExpr.AssignOp.RightSignedShift; }
    | ">>>=" { ret = AssignExpr.AssignOp.RightUnsignedShift; }
    | "&="   { ret = AssignExpr.AssignOp.And; }
    | "^="   { ret = AssignExpr.AssignOp.XOr; }
    | "|="   { ret = AssignExpr.AssignOp.Or; }
  )
  { return ret; }
}

Expr ConditionalExpression():
{
	Expr ret;
	Expr left;
	Expr right;
}
{
  ret = ConditionalOrExpression()
  [ "?" left = Expression() ":" right = ConditionalExpression() { ret = new ConditionalExpr(ret, left, right); } ]
  { return ret; }
}

Expr ConditionalOrExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = ConditionalAndExpression() ( "||" right = ConditionalAndExpression() { ret = new BinaryExpr(ret, BinaryExpr.BinaryOp.Or, right); } )*
  { return ret; }
}

Expr ConditionalAndExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = InclusiveOrExpression() ( "&&" right = InclusiveOrExpression() { ret = new BinaryExpr(ret, BinaryExpr.BinaryOp.And, right); } )*
  { return ret; }
}

Expr InclusiveOrExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = ExclusiveOrExpression() ( "|" right = ExclusiveOrExpression() { ret = new BinaryExpr(ret, BinaryExpr.BinaryOp.BinOr, right); } )*
  { return ret; }
}

Expr ExclusiveOrExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = AndExpression() ( "^" right = AndExpression() { ret = new BinaryExpr(ret, BinaryExpr.BinaryOp.XOr, right); } )*
  { return ret; }
}

Expr AndExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = EqualityExpression() ( "&" right = EqualityExpression() { ret = new BinaryExpr(ret, BinaryExpr.BinaryOp.BinAnd, right); } )*
  { return ret; }
}

Expr EqualityExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = InstanceOfExpression()
  (
    ( "==" { op = BinaryExpr.BinaryOp.Equal; } |
      "!=" { op = BinaryExpr.BinaryOp.NotEqual; }
    ) right = InstanceOfExpression() { ret = new BinaryExpr(ret, op, right); }
  )*
  { return ret; }
}

Expr InstanceOfExpression():
{
	Expr ret;
	NodeList<AnnotationExpr> annotations;
	Type type;
}
{
  ret = RelationalExpression() [ "instanceof" annotations = Annotations() type = Type(annotations) { ret = new InstanceOfExpr(ret, type); } ]
  { return ret; }
}

Expr RelationalExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = ShiftExpression()
  (
  	( "<"  { op = BinaryExpr.BinaryOp.Less; } |
  	  ">"  { op = BinaryExpr.BinaryOp.Greater; } |
  	  "<=" { op = BinaryExpr.BinaryOp.LessOrEqual; } |
  	  ">=" { op = BinaryExpr.BinaryOp.GreaterOrEqual; }
  	) right = ShiftExpression() { ret = new BinaryExpr(ret, op, right); }
  )*
  { return ret; }
}

Expr ShiftExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = AdditiveExpression()
  (
  	( "<<"             { op = BinaryExpr.BinaryOp.LeftShift; } |
  	  RSIGNEDSHIFT()   { op = BinaryExpr.BinaryOp.RightSignedShift; } |
  	  RUNSIGNEDSHIFT() { op = BinaryExpr.BinaryOp.RightUnsignedShift; }
  	) right = AdditiveExpression() { ret = new BinaryExpr(ret, op, right); }
  )*
  { return ret; }
}

Expr AdditiveExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = MultiplicativeExpression()
  (
  	( "+" { op = BinaryExpr.BinaryOp.Plus; } |
  	  "-" { op = BinaryExpr.BinaryOp.Minus; }
  	) right = MultiplicativeExpression() { ret = new BinaryExpr(ret, op, right); }
  )*
  { return ret; }
}

Expr MultiplicativeExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = UnaryExpression()
  (
  	( "*" { op = BinaryExpr.BinaryOp.Times; } |
  	  "/" { op = BinaryExpr.BinaryOp.Divide; } |
  	  "%" { op = BinaryExpr.BinaryOp.Remainder; }
  	) right = UnaryExpression() { ret = new BinaryExpr(ret, op, right); }
  )*
  { return ret; }
}

Expr UnaryExpression():
{
	Expr ret;
	UnaryExpr.UnaryOp op;
}
{
  (
	  ret = PreIncrementExpression()
	|
	  ret = PreDecrementExpression()
	|
	  ( "+" { op = UnaryExpr.UnaryOp.Positive; } |
	    "-" { op = UnaryExpr.UnaryOp.Negative; }
	  ) ret = UnaryExpression()
	  { ret = new UnaryExpr(op, ret); }
	|
	  ret = UnaryExpressionNotPlusMinus()
  )
  { return ret; }
}

Expr PreIncrementExpression():
{
	Expr ret;
}
{
  "++" ret = UnaryExpression() { ret = new UnaryExpr(UnaryExpr.UnaryOp.PreIncrement, ret); }
  { return ret; }
}

Expr PreDecrementExpression():
{
	Expr ret;
}
{
  "--" ret = UnaryExpression() { ret = new UnaryExpr(UnaryExpr.UnaryOp.PreDecrement, ret); }
  { return ret; }
}

Expr UnaryExpressionNotPlusMinus():
{
	Expr ret;
	UnaryExpr.UnaryOp op;
}
{
  (
	  ( "~" { op = UnaryExpr.UnaryOp.Inverse; } |
	    "!" { op = UnaryExpr.UnaryOp.Not;     }
	  ) ret = UnaryExpression() { ret = new UnaryExpr(op, ret); }
	|
	  LOOKAHEAD( CastExpression() )
	  ret = CastExpression()
	|
      ret = PostfixExpression()
  )
  { return ret; }
}

Expr PostfixExpression():
{
	Expr ret;
	UnaryExpr.UnaryOp op;
}
{
  ret = PrimaryExpression()
  [
  	LOOKAHEAD(2)
    ( "++" { op = UnaryExpr.UnaryOp.PostIncrement; } |
      "--" { op = UnaryExpr.UnaryOp.PostDecrement; }
    ) { ret = new UnaryExpr(op, ret); }
  ]
  { return ret; }
}

Expr CastExpression():
{
	Expr ret;
	Type type;
	NodeList types = new NodeList();
	NodeList<AnnotationExpr> annotations = null;
}
{
  "(" 
  annotations = Annotations()
  (
  	  LOOKAHEAD(2)
  	  type = PrimitiveType(annotations) ")" ret = UnaryExpression() { ret = new CastExpr(type, ret); }
  	|
  	  type = ReferenceType(annotations) { types = types.append(type); }
  	  ("&" annotations = Annotations() type = ReferenceType(annotations) { types = types.append(type); } )*
  	  ")" ret = UnaryExpressionNotPlusMinus()
  	  {
  	    if (types.size() > 1) type = new IntersectionType(types);
  	    ret = new CastExpr(type, ret);
  	  }
  )
  { return ret; }
}

Expr PrimaryExpression():
{
	Expr ret;
	Expr inner;
}
{
  ret = PrimaryPrefix() ( LOOKAHEAD(2) ret = PrimarySuffix(ret) )*
  { return ret; }
}

Expr PrimaryExpressionWithoutSuperSuffix():
{
	Expr ret;
	Expr inner;
}
{
  ret = PrimaryPrefix() ( LOOKAHEAD( PrimarySuffixWithoutSuper(null) ) ret = PrimarySuffixWithoutSuper(ret) )*
  { return ret; }
}

Expr PrimaryPrefix():
{
	Expr ret = null;
	Name name;
	NodeList typeArgs = null;
	NodeList args = null;
	boolean hasArgs = false;
	boolean isLambda = false;
	Type type;
	Parameter p = null;
	VariableDeclaratorId id = null;
}
{
  (
    ret = Literal()
  |
    "this" { ret = new ThisExpr(null); }
  |
    "super" { ret = new SuperExpr(null); }
	(
	  "."
	  [ typeArgs = TypeArguments() ]
	  name = Name()
	  [ args = Arguments() {hasArgs=true;} ]
	  {
	    if (hasArgs) {
	  	  ret = new CallExpr(ret, typeArgs, name, args);
		} else {
	  	  ret = new SelectExpr(ret, null, name);
		}
      }
	|
	  "::" [typeArgs = TypeParameters() ]
      ( name = Name() | "new" { name = new Name("new"); } )
	  { ret = new ReferenceExpr(ret, typeArgs, name); }

// WTF!!
//    |
//      args = Arguments()
//      { new CallExpr(ret, typeArgs, null, args); }

	)
  |
    "(" ret = Expression() ")"
    { ret = new EnclosedExpr(ret); }
  |
    ret = AllocationExpression(null)
  |
    LOOKAHEAD( ResultType() "." "class" )
    type = ResultType()  "." "class"
    { ret = new ClassExpr(type); }
  |
    LOOKAHEAD (ResultType() "::" )
    type = ResultType() "::" [typeArgs = TypeParameters() ]
    ( name = Name() | "new" { name = new Name("new"); } )
    { ret = new ReferenceExpr(new TypeExpr(type), typeArgs, name); }
  |
    name = Name() [ args = Arguments() { hasArgs=true; } ]
    {
      if (hasArgs) {
        ret = new CallExpr(null, null, name, args);
      } else {
        ret = name;
      }
    }
  )
  { return ret; }
}

Expr PrimarySuffix(Expr scope):
{
	Expr ret;
}
{
  (
  	LOOKAHEAD(2)
	ret = PrimarySuffixWithoutSuper(scope)
	|
  	"." "super" { ret = new SuperExpr(scope); }
  )
  { return ret; }
}

Expr PrimarySuffixWithoutSuper(Expr scope):
{
	Expr ret;
	NodeList typeArgs = null;
	NodeList args = null;
	boolean hasArgs = false;
	Name name;
}
{
  (
  	"."
  	(
		"this" { ret = new ThisExpr(scope); }
	  |
	  	ret = AllocationExpression(scope)
	  |
	  	LOOKAHEAD( [ TypeArguments() ] <IDENTIFIER> )
	  	[ typeArgs = TypeArguments() ]
	  	name = Name()
	  	[ args = Arguments() {hasArgs=true;} ]
	  	{
			if (hasArgs) {
	  			ret = new CallExpr(scope, typeArgs, name, args);
			} else {
	  			ret = new SelectExpr(scope, typeArgs, name);
			}
	  	}
	)
	|
	  "["ret = Expression() "]" { ret = new ArrayAccessExpr(scope, ret); }
  )
  { return ret; }
}

Expr Literal():
{
	Expr ret;
}
{
  (
    <INTEGER_LITERAL> { ret = new LiteralExpr<Integer>(Integer.class, token.image); }
  |
    <LONG_LITERAL> { ret = new LiteralExpr<Long>(Long.class, token.image); }
  |
    <FLOAT_LITERAL> { ret = new LiteralExpr<Float>(Float.class, token.image); }
  |
    <DOUBLE_LITERAL> { ret = new LiteralExpr<Double>(Double.class, token.image); }
  |
    <CHARACTER_LITERAL> { ret = new LiteralExpr<Character>(Character.class, token.image); }
  |
    <STRING_LITERAL> { ret = new LiteralExpr<String>(String.class, token.image); }
  |
    ret = BooleanLiteral()
  |
    ret = NullLiteral()
  )
  { return ret; }
}

Expr BooleanLiteral():
{
	Expr ret;
}
{
  (
    "true" { ret = new LiteralExpr<Boolean>(Boolean.class, token.image); }
  |
    "false" { ret = new LiteralExpr<Boolean>(Boolean.class, token.image); }
  )
  { return ret; }
}

Expr NullLiteral():
{}
{
  "null"
  { return new LiteralExpr<Void>(Void.class, token.image); }
}

NodeList Arguments():
{
	NodeList ret = null;
}
{
  "(" [ ret = ArgumentList() ] ")"
  { return ret; }
}

NodeList ArgumentList():
{
	NodeList ret = new NodeList();
	Expr expr;
}
{
  expr = Expression() { ret = ret.append(expr); } ( "," expr = Expression() { ret = ret.append(expr); } )*
  { return ret; }
}

Expr AllocationExpression(Expr scope):
{
	Expr ret;
	Type type;
	NodeList typeArgs = null;
	NodeList anonymousBody = null;
	NodeList args;
	NodeList<AnnotationExpr> annotations = null;
}
{
  "new" annotations = Annotations()
  (
    type = PrimitiveType(annotations)
    ret = ArrayCreationExpr(type)
  |
    [ typeArgs = TypeArguments() annotations = Annotations() ]
	type = ClassOrInterfaceType(annotations)
    (
	  ret = ArrayCreationExpr(type)
	|
	  args = Arguments() [ LOOKAHEAD(2) anonymousBody = ClassOrInterfaceBody(TypeDecl.TypeKind.Class) ]
      { ret = new ObjectCreationExpr(scope, (ClassOrInterfaceType) type, typeArgs, args, anonymousBody); }
    )
  )
  { return ret; }
}

Expr ArrayCreationExpr(Type componentType):
{
	Expr expr;
	NodeList arrayDimExprs = new NodeList();
	NodeList arrayDims = new NodeList();
	NodeList<AnnotationExpr> annotations = null;
	ArrayInitializerExpr initializer;
}
{
  (
    LOOKAHEAD(3)
    (
      LOOKAHEAD( Annotations() "[" Expression() "]" )
      annotations = Annotations() "[" expr = Expression() "]"
      { arrayDimExprs = arrayDimExprs.append(new ArrayDimExpr(annotations, expr)); }
    )+
    (
      LOOKAHEAD( Annotations() "[" "]" )
      annotations = Annotations() "[" "]"
      { arrayDims = arrayDims.append(new ArrayDim(annotations)); }
    )*
    { return new ArrayCreationExpr(componentType, arrayDimExprs, arrayDims, null); }
  |
    (
      LOOKAHEAD( Annotations() "[" "]" )
      annotations = Annotations() "[" "]"
      { arrayDims = arrayDims.append(new ArrayDim(annotations)); }
    )+
    initializer = ArrayInitializer()
    { return new ArrayCreationExpr(componentType, arrayDimExprs, arrayDims, initializer); }
  )
}


/*
 * Stmt syntax follows.
 */

Stmt Statement():
{
	Stmt ret;
}
{
  (
	  LOOKAHEAD(2)
	  ret = LabeledStatement()
	|
	  ret = AssertStatement()
	|
	  ret = Block()
	|
	  ret = EmptyStatement()
	|
	  ret = StatementExpression()
	|
	  ret = SwitchStatement()
	|
	  ret = IfStatement()
	|
	  ret = WhileStatement()
	|
	  ret = DoStatement()
	|
	  ret = ForStatement()
	|
	  ret = BreakStatement()
	|
	  ret = ContinueStatement()
	|
	  ret = ReturnStatement()
	|
	  ret = ThrowStatement()
	|
	  ret = SynchronizedStatement()
	|
	  ret = TryStatement()
  )
  { return ret; }
}

AssertStmt AssertStatement():
{
	Expr check;
	Expr msg = null;
}
{
  "assert" check = Expression() [ ":" msg = Expression() ] ";"
  { return new AssertStmt(check, msg);  }
}

LabeledStmt LabeledStatement():
{
	Name label;
	Stmt stmt;
}
{
  label = Name() ":" stmt = Statement()
  { return new LabeledStmt(label, stmt); }
}

BlockStmt Block():
{
	NodeList stmts;
}
{
  "{" stmts = Statements() "}"
  { return new BlockStmt(stmts); }
}

/*
 * Classes inside block stametents can only be abstract or final. The semantic must check it.
 */
Stmt BlockStatement():
{
	Stmt ret;
	Expr expr;
	TypeDecl typeDecl;
	Modifiers modifiers;
}
{
  (
	  LOOKAHEAD( Modifiers() ("class" | "interface") )
	  modifiers = Modifiers()
	  typeDecl = ClassOrInterfaceDecl(modifiers) { ret = new TypeDeclarationStmt(typeDecl); }
	|
  	  LOOKAHEAD( VariableDeclExpression() )
	  expr = VariableDeclExpression() ";"
	  { ret = new ExpressionStmt(expr); }
    |
	  ret = Statement()
  )
  { return ret; }
}

VariableDeclarationExpr VariableDeclExpression():
{
	Modifiers modifiers;
	LocalVariableDecl variableDecl;
}
{
  modifiers = Modifiers() variableDecl = VariableDecl(modifiers)
  { return new VariableDeclarationExpr(variableDecl); }
}

EmptyStmt EmptyStatement():
{}
{
  ";"
  { return new EmptyStmt(); }
}

Stmt LambdaBody():
{
  Expr expr;
  Stmt n = null;
}
{
  (
  	expr = Expression()
  	{
  	  n = new ExpressionStmt(expr);
  	}
 	|  n = Block()
  )
  {
  	return n;
  }

}

ExpressionStmt StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{
	Expr expr;
	AssignExpr.AssignOp op;
	Expr value;
	NodeList typeArgs = null;
	Expr inner = null;
}
{
  (
    LOOKAHEAD(2) expr = PreIncrementExpression()
  |
    expr = PreDecrementExpression()
  |
    expr = PrimaryExpression()
    [
      "++" { expr = new UnaryExpr(UnaryExpr.UnaryOp.PostIncrement, expr);  }
    |
      "--" { expr = new UnaryExpr(UnaryExpr.UnaryOp.PostDecrement, expr);  }
    |
      op = AssignmentOperator() value = Expression() { expr = new AssignExpr(expr, op, value); }
	]
  )
  ";"
  { return new ExpressionStmt(expr); }
}

SwitchStmt SwitchStatement():
{
	Expr selector;
	SwitchEntryStmt entry;
	NodeList entries = new NodeList();
}
{
  "switch" "(" selector = Expression() ")" "{"
    ( entry = SwitchEntry() { entries = entries.append(entry); } )*
  "}"

  { return new SwitchStmt(selector, entries); }
}

SwitchEntryStmt SwitchEntry():
{
	Expr label = null;
	NodeList stmts;
}
{
  (
	  "case" label = Expression()
	|
	  "default" 
  )
  ":" stmts = Statements()

  { return new SwitchEntryStmt(label, stmts); }
}

IfStmt IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if Stmt.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
	Expr condition;
	Stmt thenStmt;
	Stmt elseStmt = null;
}
{
  "if" "(" condition = Expression() ")" thenStmt = Statement() [ LOOKAHEAD(1) "else" elseStmt = Statement() ]
  { return new IfStmt(condition, thenStmt, elseStmt); }
}

WhileStmt WhileStatement():
{
	Expr condition;
	Stmt body;
}
{
  "while" "(" condition = Expression() ")" body = Statement()
  { return new WhileStmt(condition, body); }
}

DoStmt DoStatement():
{
	Expr condition;
	Stmt body;
}
{
  "do" body = Statement() "while" "(" condition = Expression() ")" ";"
  { return new DoStmt(body, condition); }
}
Stmt ForStatement():
{
	String id = null;
	VariableDeclarationExpr varExpr = null;
	Expr expr = null;
	NodeList init = null;
	NodeList update = null;
	Stmt body;
}
{
  "for" "("

  (
      LOOKAHEAD(VariableDeclExpression() ":")
      varExpr = VariableDeclExpression() ":" expr = Expression()
    |
     [ init = ForInit() ] ";" [ expr = Expression() ] ";" [ update = ForUpdate() ]
  )

  ")" body = Statement()

  {
  	if (varExpr != null) {
  		return new ForeachStmt(varExpr, expr, body);
  	}
	return new ForStmt(init, expr, update, body);
  }
}

NodeList ForInit():
{
	NodeList ret;
	Expr expr;
}
{
  (
	  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
	  expr = VariableDeclExpression() { ret = new NodeList(); ret = ret.append(expr); }
	|
	  ret = ExpressionList()
  )
  { return ret; }
}

NodeList ExpressionList():
{
	NodeList ret = new NodeList();
	Expr expr;
}
{
  expr = Expression() { ret = ret.append(expr); } ( "," expr = Expression()  { ret = ret.append(expr); } )*

  { return ret; }
}

NodeList ForUpdate():
{
	NodeList ret;
}
{
  ret = ExpressionList()

  { return ret; }
}

BreakStmt BreakStatement():
{
	Name id = null;
}
{
  "break" [ id = Name() ] ";"
  { return new BreakStmt(id); }
}

ContinueStmt ContinueStatement():
{
	Name id = null;
}
{
  "continue" [ id = Name() ] ";"
  { return new ContinueStmt(id); }
}

ReturnStmt ReturnStatement():
{
	Expr expr = null;
}
{
  "return" [ expr = Expression() ] ";"
  { return new ReturnStmt(expr); }
}

ThrowStmt ThrowStatement():
{
	Expr expr;
}
{
  "throw" expr = Expression() ";"
  { return new ThrowStmt(expr); }
}

SynchronizedStmt SynchronizedStatement():
{
	Expr expr;
	BlockStmt block;
}
{
  "synchronized" "(" expr = Expression() ")" block = Block()
  { return new SynchronizedStmt(expr, block); }
}

TryStmt TryStatement():
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{
	NodeList resources = new NodeList();
	BlockStmt tryBlock;
	BlockStmt finallyBlock = null;
	NodeList catchs = new NodeList();
	Parameter except;
	BlockStmt catchBlock;
	Modifiers exceptModifiers;
	Type exceptType;
	NodeList<Type> exceptTypes = new NodeList<Type>();
	VariableDeclaratorId exceptId;
}
{
  "try" 
  (resources = ResourceSpecification())?
  tryBlock = Block()
  (
    LOOKAHEAD(2)
    (
      "catch" "("
      exceptModifiers = Modifiers() exceptType = ClassOrInterfaceType(null) { exceptTypes = exceptTypes.append(exceptType); }
      ( "|" exceptType = ClassOrInterfaceType(null) { exceptTypes = exceptTypes.append(exceptType); } )*
      exceptId = VariableDeclaratorId()
      ")" catchBlock = Block()
      {
        if (exceptTypes.size() > 1) exceptType = new UnionType(exceptTypes);
        except = new Parameter(exceptModifiers, exceptType, false, exceptId);
        catchs = catchs.append(new CatchClause(except, catchBlock));
        exceptTypes = new NodeList();
      }
    )*
    [ "finally" finallyBlock = Block() ]
  |
    "finally" finallyBlock = Block()
  )
  { return new TryStmt(resources, tryBlock, catchs, finallyBlock); }
}

NodeList ResourceSpecification() :
{
NodeList vars;
}
{
  "("
  vars = Resources()
  (LOOKAHEAD(2) ";")?
  ")"
  { return vars; }
}


NodeList Resources() :
{
	NodeList vars = new NodeList();
	VariableDeclarationExpr var;
}
 {
  /*this is a bit more lenient than we need to be, eg allowing access modifiers like private*/
  var = VariableDeclExpression() {vars = vars.append(var);} (LOOKAHEAD(2) ";" var = VariableDeclExpression() {vars = vars.append(var);})*
  { return vars; }
}


/* We use productions to match >>>, >> and > so that we can keep the
 * type Decl syntax with generics clean
 */

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

/* Annotation syntax follows. */

NodeList<AnnotationExpr> Annotations():
{
	NodeList<AnnotationExpr> annotations = new NodeList<AnnotationExpr>();
	AnnotationExpr annotation;
}
{
  ( annotation = Annotation() { annotations = annotations.append(annotation); } )*
  { return annotations; }
}

AnnotationExpr Annotation():
{
	AnnotationExpr ret;
}
{
  (
	   LOOKAHEAD( "@" QName() "(" ( <IDENTIFIER> "=" | ")" ))
	   ret = NormalAnnotation()
	 |
	   LOOKAHEAD( "@" QName() "(" )
	   ret = SingleMemberAnnotation()
	 |
	   ret = MarkerAnnotation()
  )
  { return ret; }
}

NormalAnnotationExpr NormalAnnotation():
{
	QName name;
	NodeList pairs = null;
}
{
   "@" name = QName() "(" [ pairs = MemberValuePairs() ] ")"
   { return new NormalAnnotationExpr(name, pairs); }
}

MarkerAnnotationExpr MarkerAnnotation():
{
	QName name;
}
{
  "@" name = QName()
  { return new MarkerAnnotationExpr(name); }
}

SingleMemberAnnotationExpr SingleMemberAnnotation():
{
	QName name;
	Expr memberVal;
}
{
  "@" name = QName() "(" memberVal = MemberValue() ")"
  { return new SingleMemberAnnotationExpr(name, memberVal); }
}

NodeList MemberValuePairs():
{
	NodeList ret = new NodeList();
	MemberValuePair pair;
}
{
   pair = MemberValuePair() { ret = ret.append(pair); } ( "," pair = MemberValuePair() { ret = ret.append(pair); } )*
   { return ret; }
}

MemberValuePair MemberValuePair():
{
	Name name;
	Expr value;
}
{
    name = Name() "=" value = MemberValue()
    { return new MemberValuePair(name, value); }
}

Expr MemberValue():
{
	Expr ret;
}
{
  (
	   ret = Annotation()
	 |
	   ret = MemberValueArrayInitializer()
	 |
	   ret = ConditionalExpression()
  )
  { return ret; }
}

Expr  MemberValueArrayInitializer():
{
	NodeList ret = new NodeList();
	Expr member;
}
{
  "{" 
  (	member = MemberValue() { ret = ret.append(member); } ( LOOKAHEAD(2) "," member = MemberValue() { ret = ret.append(member); } )*  )? [ "," ]
  "}"
  { return new ArrayInitializerExpr(ret); }
}


/* Annotation Types. */

TypeDecl AnnotationTypeDecl(Modifiers modifiers):
{
	Name name;
	NodeList members;
}
{
  "@" "interface" name = Name() members = AnnotationTypeBody()
  { return new TypeDecl(TypeDecl.TypeKind.AnnotationType, modifiers, name, null, null, null, members); }
}

NodeList AnnotationTypeBody():
{
	NodeList ret = null;
	Decl member;
}
{
  "{" ( member = AnnotationBodyDecl() { ret = ret.append(member); } )* "}"
  { return ret; }
}

Decl AnnotationBodyDecl():
{
   Modifiers modifiers;
   Decl ret;
}
{
  (
	";" { ret = new EmptyTypeDecl(); }
  |
    modifiers = Modifiers()
    (
      LOOKAHEAD(Type() <IDENTIFIER> "(")
      ret = AnnotationTypeMemberDecl(modifiers)
    |
      ret = ClassOrInterfaceDecl(modifiers)
    |
      ret = EnumDecl(modifiers)
    |
      ret = AnnotationTypeDecl(modifiers)
    |
      ret = FieldDecl(modifiers)
    )
  )
  { return ret; }
}

AnnotationMemberDecl AnnotationTypeMemberDecl(Modifiers modifiers):
{
	Type type;
	Name name;
	NodeList dims;
	Expr defaultVal = null;
}
{
  type = Type(null) name = Name() "(" ")" dims = ArrayDims() [ defaultVal = DefaultValue() ] ";"
  { return new AnnotationMemberDecl(modifiers, type, name, dims, defaultVal); }
}

Expr DefaultValue():
{
	Expr ret;
}
{
  "default" ret = MemberValue()
  { return ret; }
}
