/*
 * Copyright (C) 2007-2010 JÃºlio Vilmar Gesser.
 * Copyright (C) 2011, 2013-2015 The JavaParser Team.
 * Copyright (C) 2011, 2015 Didier Villevalois.
 *
 * This file is part of JLaTo.
 *
 * JLaTo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JLaTo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with JLaTo.  If not, see <http://www.gnu.org/licenses/>.
 */

options {
  LOOKAHEAD = 1;
  JAVA_UNICODE_ESCAPE = true;

  JDK_VERSION = "1.6";

  //SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  STATIC = false;

  COMMON_TOKEN_ACTION = true;
  TOKEN_MANAGER_USES_PARSER = true;

  TOKEN_EXTENDS = "org.jlato.parser.ParserBase.TokenBase";
}

PARSER_BEGIN(ParserImpl)
/*
 * Copyright (C) 2015 Didier Villevalois.
 *
 * This file is part of JLaTo.
 *
 * JLaTo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JLaTo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with JLaTo.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.jlato.parser;

import java.io.*;
import java.util.*;
import org.jlato.tree.*;
import org.jlato.tree.decl.*;
import org.jlato.tree.decl.TypeDecl.TypeKind;
import org.jlato.tree.expr.*;
import org.jlato.tree.name.*;
import org.jlato.tree.stmt.*;
import org.jlato.tree.type.*;
import org.jlato.internal.bu.*;

/**
 * <p>This class was generated automatically by javacc, do not edit.</p>
 */
final class ParserImpl extends ParserBase {

    void reset(InputStream inputStream, String encoding) {
        ReInit(inputStream, encoding);
        reset();
    }

    void reset(Reader reader) {
        ReInit(reader);
        reset();
    }

    private void throwParseException(Token token, String message) throws ParseException {
        StringBuilder buf = new StringBuilder();
        buf.append(message);
        buf.append(": \"");
        buf.append(token.image);
        buf.append("\" at line ");
        buf.append(token.beginLine);
        buf.append(", column ");
        buf.append(token.beginColumn);
        ParseException e = new ParseException(buf.toString());
        e.currentToken = token;
        throw e;
    }
}

PARSER_END(ParserImpl)

TOKEN_MGR_DECLS:{

	void CommonTokenAction(Token token) {
		parser.postProcessToken(token);
	}
}

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  <WHITESPACE: (" " | "\t")+ >
}

SPECIAL_TOKEN :
{
  <NEWLINE: ("\n" | "\r" | "\f" | "\r\n") >
}

/* COMMENTS */

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* >
}

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_JAVA_DOC_COMMENT
|
  <"/*"> : IN_MULTI_LINE_COMMENT
}

<IN_JAVA_DOC_COMMENT>
SPECIAL_TOKEN :
{
  <JAVA_DOC_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_JAVA_DOC_COMMENT, IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < LONG_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])
      | <HEX_LITERAL> (["l","L"])
      | <OCTAL_LITERAL> (["l","L"])
      | <BINARY_LITERAL> (["l","L"])
  >
|
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
      | <BINARY_LITERAL>
  >
|
  < #DECIMAL_LITERAL: (["0"-"9"]((["0"-"9","_"])*["0"-"9"])?) >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"]((["0"-"9","a"-"f","A"-"F","_"])*["0"-"9","a"-"f","A"-"F"])?) >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"]((["0"-"7","_"])*["0"-"7"])?) >
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0","1"]((["0","1","_"])*["0","1"])?) >
|
  < FLOAT_LITERAL:
        <DECIMAL_FLOAT_LITERAL>
      | <HEXADECIMAL_FLOAT_LITERAL>
  >
|
  < DOUBLE_LITERAL:
        <DECIMAL_DOUBLE_LITERAL>
      | <HEXADECIMAL_DOUBLE_LITERAL>
  >
|
  < #FLOAT_SUFFIX: ["f","F"] >
|
  < #DOUBLE_SUFFIX: ["d","D"] >
|
  < #DECIMAL_FLOAT_LITERAL:
        (<DECIMAL_LITERAL>)+ "." (<DECIMAL_LITERAL>)* (<DECIMAL_EXPONENT>)? <FLOAT_SUFFIX>
      | "." (<DECIMAL_LITERAL>)+ (<DECIMAL_EXPONENT>)? <FLOAT_SUFFIX>
      | (<DECIMAL_LITERAL>)+ <DECIMAL_EXPONENT> <FLOAT_SUFFIX>
      | (<DECIMAL_LITERAL>)+ (<DECIMAL_EXPONENT>)? <FLOAT_SUFFIX>
  >
|
  < #DECIMAL_DOUBLE_LITERAL:
        (<DECIMAL_LITERAL>)+ "." (<DECIMAL_LITERAL>)* (<DECIMAL_EXPONENT>)? (<DOUBLE_SUFFIX>)?
      | "." (<DECIMAL_LITERAL>)+ (<DECIMAL_EXPONENT>)? (<DOUBLE_SUFFIX>)?
      | (<DECIMAL_LITERAL>)+ <DECIMAL_EXPONENT> (<DOUBLE_SUFFIX>)?
      | (<DECIMAL_LITERAL>)+ (<DECIMAL_EXPONENT>)? <DOUBLE_SUFFIX>
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (<DECIMAL_LITERAL>)+ >
|
  < #HEXADECIMAL_FLOAT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> <FLOAT_SUFFIX>
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> <FLOAT_SUFFIX>
  >
|
  < #HEXADECIMAL_DOUBLE_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (<DOUBLE_SUFFIX>)?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (<DOUBLE_SUFFIX>)?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "\""
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < ARROW: "->" >
| < DOUBLECOLON : "::">
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     matchedToken.realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     matchedToken.realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}

/* QUOTE VARIABLES */

TOKEN :
{
  < NODE_VARIABLE:
    "\u0024"          // "$"
    (<PART_LETTER>)*
  >
  {
    if (!parser.quotesMode) matchedToken.kind = IDENTIFIER;
  }
|
  < NODE_LIST_VARIABLE:
    ".."
    "\u0024"          // "$"
    (<PART_LETTER>)*
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         //"\u0024",          // "$"
         "\u0041"-"\u005a", // "A"-"Z"
         "\u005f",          // "_"
         "\u0061"-"\u007a", // "a"-"z"
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u0236",
         "\u0250"-"\u02c1",
         "\u02c6"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03f5",
         "\u03f7"-"\u03fb",
         "\u0400"-"\u0481",
         "\u048a"-"\u04ce",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0500"-"\u050f",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u066e"-"\u066f",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06ee"-"\u06ef",
         "\u06fa"-"\u06fc",
         "\u06ff",
         "\u0710",
         "\u0712"-"\u072f",
         "\u074d"-"\u074f",
         "\u0780"-"\u07a5",
         "\u07b1",
         "\u0904"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bd",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0"-"\u0ae1",
         "\u0af1",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b35"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b71",
         "\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bf9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbd",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f8",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u16ee"-"\u16f0",
         "\u1700"-"\u170c",
         "\u170e"-"\u1711",
         "\u1720"-"\u1731",
         "\u1740"-"\u1751",
         "\u1760"-"\u176c",
         "\u176e"-"\u1770",
         "\u1780"-"\u17b3",
         "\u17d7",
         "\u17db"-"\u17dc",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1900"-"\u191c",
         "\u1950"-"\u196d",
         "\u1970"-"\u1974",
         "\u1d00"-"\u1d6b",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u2054",
         "\u2071",
         "\u207f",
         "\u20a0"-"\u20b1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u213d"-"\u213f",
         "\u2145"-"\u2149",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303c",
         "\u3041"-"\u3096",
         "\u309d"-"\u309f",
         "\u30a1"-"\u30ff",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u31f0"-"\u31ff",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\ud801", //for supplementary characters suport
         "\ud802", //for supplementary characters suport
         "\uf900"-"\ufa2d",
         "\ufa30"-"\ufa6a",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfc",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "\u0024",          // "$"
         "\u0030"-"\u0039", // "0"-"9"
         "\u0041"-"\u005a", // "A"-"Z"
         "\u005f",          // "_"
         "\u0061"-"\u007a", // "a"-"z"
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00ad",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u0236",
         "\u0250"-"\u02c1",
         "\u02c6"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u0357",
         "\u035d"-"\u036f",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03f5",
         "\u03f7"-"\u03fb",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048a"-"\u04ce",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0500"-"\u050f",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0600"-"\u0603",
         "\u0610"-"\u0615",
         "\u0621"-"\u063a",
         "\u0640"-"\u0658",
         "\u0660"-"\u0669",
         "\u066e"-"\u06d3",
         "\u06d5"-"\u06dd",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06fc",
         "\u06ff",
         "\u070f"-"\u074a",
         "\u074d"-"\u074f",
         "\u0780"-"\u07b1",
         "\u0901"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a01"-"\u0a03",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0"-"\u0ae3",
         "\u0ae6"-"\u0aef",
         "\u0af1",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b35"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b71",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0bf9",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbc"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f8",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u16ee"-"\u16f0",
         "\u1700"-"\u170c",
         "\u170e"-"\u1714",
         "\u1720"-"\u1734",
         "\u1740"-"\u1753",
         "\u1760"-"\u176c",
         "\u176e"-"\u1770",
         "\u1772"-"\u1773",
         "\u1780"-"\u17d3",
         "\u17d7",
         "\u17db"-"\u17dd",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180d",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1900"-"\u191c",
         "\u1920"-"\u192b",
         "\u1930"-"\u193b",
         "\u1946"-"\u196d",
         "\u1970"-"\u1974",
         "\u1d00"-"\u1d6b",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u2054",
         "\u2060"-"\u2063",
         "\u206a"-"\u206f",
         "\u2071",
         "\u207f",
         "\u20a0"-"\u20b1",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u20e5"-"\u20ea",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u213d"-"\u213f",
         "\u2145"-"\u2149",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303c",
         "\u3041"-"\u3096",
         "\u3099"-"\u309a",
         "\u309d"-"\u309f",
         "\u30a1"-"\u30ff",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u31f0"-"\u31ff",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\ud801", //for supplementary characters suport
         "\ud802", //for supplementary characters suport
         "\ud834", //for supplementary characters suport
         "\udc00", //for supplementary characters suport
         "\udc01", //for supplementary characters suport
         "\udd7b", //for supplementary characters suport
         "\uf900"-"\ufa2d",
         "\ufa30"-"\ufa6a",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfc",
         "\ufe00"-"\ufe0f",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

CompilationUnit CompilationUnit():
{
	PackageDecl packageDecl = null;
	NodeList imports;
	NodeList types;
}
{
  { run(); }

  [ LOOKAHEAD(PackageDecl()) packageDecl = PackageDecl() ]
  imports = ImportDecls()
  types = TypeDecls()
  (<EOF> | "\u001A" /** ctrl+z char **/)

  { return enRun(new CompilationUnit(preamble, packageDecl, imports, types)); }
}

/**********************************************************************************************************************
 * Declarations
 **********************************************************************************************************************/

PackageDecl PackageDecl():
{
	NodeList<AnnotationExpr> annotations = null;
	QualifiedName name;
}
{
  { run(); }

  annotations = Annotations() "package" name = QualifiedName() ";"

  { return enRun(new PackageDecl(annotations, name)); }
}

NodeList ImportDecls():
{
	NodeList imports = new NodeList();
	ImportDecl importDecl = null;
}
{
  { run(); }
  ( importDecl = ImportDecl() { imports = imports.append(importDecl); } )*
  { return enRun(imports, ImportDecl.listShape); }
}

ImportDecl ImportDecl():
{
	QualifiedName name;
	boolean isStatic = false;
	boolean isAsterisk = false;
}
{
  { run(); }
  "import" [ "static" { isStatic = true; } ] name = QualifiedName() [ "." "*" { isAsterisk = true; } ] ";"
  { return enRun(new ImportDecl(name, isStatic, isAsterisk)); }
}

NodeList TypeDecls():
{
	NodeList types = new NodeList();
	TypeDecl typeDecl = null;
}
{
  { run(); }
  ( typeDecl = TypeDecl() { types = types.append(typeDecl); } )*
  { return enRun(types, TypeDecl.listShape); }
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

NodeList Modifiers():
{
    NodeList modifiers = new NodeList();
    AnnotationExpr ann;
}
{
  { run(); }

  (
    LOOKAHEAD(2)
    (
      "public" { modifiers = modifiers.append(Modifier.Public); }
    |
      "protected" { modifiers = modifiers.append(Modifier.Protected); }
    |
      "private" { modifiers = modifiers.append(Modifier.Private); }
    |
      "abstract" { modifiers = modifiers.append(Modifier.Abstract); }
    |
      "default" { modifiers = modifiers.append(Modifier.Default); }
    |
      "static" { modifiers = modifiers.append(Modifier.Static); }
    |
      "final" { modifiers = modifiers.append(Modifier.Final); }
    |
      "transient" { modifiers = modifiers.append(Modifier.Transient); }
    |
      "volatile" { modifiers = modifiers.append(Modifier.Volatile); }
    |
      "synchronized" { modifiers = modifiers.append(Modifier.Synchronized); }
    |
      "native" { modifiers = modifiers.append(Modifier.Native); }
    |
      "strictfp" { modifiers = modifiers.append(Modifier.StrictFP); }
    |
      ann = Annotation() { modifiers = modifiers.append(ann); }
    )
  )*

  { return enRun(modifiers, ExtendedModifier.singleLineShape); }
}

/*
 * Decl syntax follows.
 */
TypeDecl TypeDecl():
{
   NodeList modifiers;
   TypeDecl ret;
}
{
  { run(); }

  (
    ";" { ret = enRun(new EmptyTypeDecl()); }
  |
    modifiers = Modifiers()
    (
      ret = ClassOrInterfaceDecl(modifiers)
    |
      ret = EnumDecl(modifiers)
    |
      ret = AnnotationTypeDecl(modifiers)
    )
  )

  { return ret; }
}


TypeDecl ClassOrInterfaceDecl(NodeList modifiers):
{
   TypeKind typeKind;
   Name name;
   NodeList typeParams = null;
   NodeList extendsClause = null;
   NodeList implementsClause = null;
   NodeList members;
}
{
  // Run is started before modifiers

  (
    "class" { typeKind = TypeKind.Class; }
  |
    "interface" { typeKind = TypeKind.Interface; }
  )
  name = Name()
  [ typeParams = TypeParameters() ]
  [ extendsClause = ExtendsList(typeKind) ]
  [ implementsClause = ImplementsList(typeKind) ]
  members = ClassOrInterfaceBody(typeKind)

  {
    if (typeKind == TypeKind.Interface)
      return enRun(new InterfaceDecl(modifiers, name, ensureNotNull(typeParams), ensureNotNull(extendsClause), members));
    else {
      QualifiedType superClassType = extendsClause == null || extendsClause.isEmpty() ? null : (QualifiedType) extendsClause.get(0);
      return enRun(new ClassDecl(modifiers, name, ensureNotNull(typeParams), NodeOption.of(superClassType), ensureNotNull(implementsClause), members));
    }
  }
}

NodeList ExtendsList(TypeKind typeKind):
{
   NodeList ret = new NodeList();
   QualifiedType cit;
   NodeList<AnnotationExpr> annotations = null;
}
{
  { run(); }
  "extends"
  (
    cit = AnnotatedQualifiedType() { ret = ret.append(cit); }
    ( "," cit = AnnotatedQualifiedType() { ret = ret.append(cit); } )*
    {
      if (ret.size() > 1 && typeKind == TypeKind.Class)
        throwParseException(token, "A class cannot extend more than one other class");
    }
  |
    LOOKAHEAD({quotesMode})
    <NODE_LIST_VARIABLE> { ret = makeVar(getToken(0)); }
  )
  { return enRun(ret, QualifiedType.extendsClauseShape); }
}

NodeList ImplementsList(TypeKind typeKind):
{
   NodeList ret = new NodeList();
   QualifiedType cit;
   NodeList<AnnotationExpr> annotations = null;
}
{
  { run(); }
  "implements"
  (
    cit = AnnotatedQualifiedType() { ret = ret.append(cit); }
    ( "," cit = AnnotatedQualifiedType() { ret = ret.append(cit); } )*
    {
      if (typeKind == TypeKind.Interface)
        throwParseException(token, "An interface cannot implement other interfaces");
    }
  |
    LOOKAHEAD({quotesMode})
    <NODE_LIST_VARIABLE> { ret = makeVar(getToken(0)); }
  )
  { return enRun(ret, QualifiedType.implementsClauseShape); }
}

TypeDecl EnumDecl(NodeList modifiers):
{
	Name name;
	NodeList implementsClause = new NodeList();
	EnumConstantDecl entry;
	NodeList<EnumConstantDecl> constants = new NodeList<EnumConstantDecl>();
	boolean trailingComma = false;
	NodeList members = null;
}
{
  // Run is started before modifiers

  "enum" name = Name() [ implementsClause = ImplementsList(TypeKind.Enum) ]
  "{"
  [
    { run(); }
    entry = EnumConstantDecl() { constants = constants.append(entry); }
    ( LOOKAHEAD(2) "," entry = EnumConstantDecl() { constants = constants.append(entry); } )*
    { constants = enRun(constants, EnumConstantDecl.listShape); }
  ]
  [ "," { trailingComma = true; } ] // TODO Add syntactic data about comma presence in EnumDecl
  [ ";" members = ClassOrInterfaceBodyDecls(TypeKind.Enum) ]
  "}"

  { return enRun(new EnumDecl(modifiers, name, implementsClause, constants, trailingComma, ensureNotNull(members))); }
}

EnumConstantDecl EnumConstantDecl():
{
	NodeList modifiers = null;
	Name name;
	NodeList<Expr> args = null;
	NodeList<MemberDecl> classBody = null;
}
{
  { run(); }

  modifiers = Modifiers() name = Name()
  [ args = Arguments() ] [ classBody = ClassOrInterfaceBody(TypeKind.Class) ]

  { return enRun(new EnumConstantDecl(modifiers, name, NodeOption.of(args), NodeOption.of(classBody))); }
}

TypeDecl AnnotationTypeDecl(NodeList modifiers):
{
	Name name;
	NodeList members;
}
{
  // Run is started before modifiers

  "@" "interface" name = Name()
  members = AnnotationTypeBody()

  { return enRun(new AnnotationDecl(modifiers, name, members)); }
}

// TODO Merge with ClassOrInterfaceBody production and do later checks programmaticaly
NodeList AnnotationTypeBody():
{
	NodeList ret = new NodeList();
	MemberDecl member;
}
{
  { run(); }
  "{"
  (
    LOOKAHEAD({quotesMode})
    <NODE_LIST_VARIABLE> { ret = makeVar(getToken(0)); }
  |
    ( member = AnnotationTypeBodyDecl() { ret = ret.append(member); } )*
  )
  "}"
  { return enRun(ret, MemberDecl.bodyShape); }
}

// TODO Merge with ClassOrInterfaceDecl production and do later checks programmaticaly
MemberDecl AnnotationTypeBodyDecl():
{
   NodeList modifiers;
   MemberDecl ret;
}
{
  { run(); }

  (
	";" { ret = enRun(new EmptyTypeDecl()); }
  |
    modifiers = Modifiers()
    (
      LOOKAHEAD(Type() Name() "(")
      ret = AnnotationTypeMemberDecl(modifiers)
    |
      ret = ClassOrInterfaceDecl(modifiers)
    |
      ret = EnumDecl(modifiers)
    |
      ret = AnnotationTypeDecl(modifiers)
    |
      ret = FieldDecl(modifiers)
    )
  )

  { return ret; }
}

// TODO Merge with MethodDecl production and do later checks programmaticaly
AnnotationMemberDecl AnnotationTypeMemberDecl(NodeList modifiers):
{
	Type type;
	Name name;
	NodeList dims;
	NodeOption<Expr> defaultVal = NodeOption.<Expr>none();
	Expr val = null;
}
{
  // Run is started before modifiers

  type = Type(null) name = Name() "(" ")" dims = ArrayDims()
  [
    { run(); }
    "default" val = MemberValue()
    { defaultVal = enRun(defaultVal.set(val), AnnotationMemberDecl.defaultValShape); }
  ]
  ";"

  { return enRun(new AnnotationMemberDecl(modifiers, type, name, dims, defaultVal)); }
}

NodeList TypeParameters():
{
	NodeList ret = new NodeList();
	TypeParameter tp;
}
{
  { run(); }

  "<"
  (
    tp = TypeParameter() { ret = ret.append(tp); }
    ( "," tp = TypeParameter() { ret = ret.append(tp); } )*
  |
    LOOKAHEAD({quotesMode})
    <NODE_LIST_VARIABLE> { ret = makeVar(getToken(0)); }
  )
  ">"

  { return enRun(ret, TypeParameter.listShape); }
}

TypeParameter TypeParameter():
{
	NodeList<AnnotationExpr> annotations = null;
	Name name;
	NodeList typeBounds = null;
}
{
  { run(); }
  annotations = Annotations() name = Name() [ typeBounds = TypeBounds() ]
  { return enRun(new TypeParameter(annotations, name, ensureNotNull(typeBounds))); }
}

NodeList TypeBounds():
{
	NodeList ret = new NodeList();
	QualifiedType cit;
	NodeList<AnnotationExpr> annotations = null;
}
{
  { run(); }
  "extends"
  (
    cit = AnnotatedQualifiedType() { ret = ret.append(cit); }
    ( "&" cit = AnnotatedQualifiedType() { ret = ret.append(cit); } )*
  |
    LOOKAHEAD({quotesMode})
    <NODE_LIST_VARIABLE> { ret = makeVar(getToken(0)); }
  )
  { return enRun(ret, TypeParameter.boundsShape); }
}

NodeList ClassOrInterfaceBody(TypeKind typeKind):
{
	NodeList ret = new NodeList();
	MemberDecl member;
}
{
  { run(); }
  "{"
  ( member = ClassOrInterfaceBodyDecl(typeKind) { ret = ret.append(member); }  )*
  "}"
  { return enRun(ret, MemberDecl.bodyShape); }
}

NodeList ClassOrInterfaceBodyDecls(TypeKind typeKind):
{
	MemberDecl member;
	NodeList ret = new NodeList();
}
{
  { run(); }
  (
    LOOKAHEAD({quotesMode})
    <NODE_LIST_VARIABLE> { ret = makeVar(getToken(0)); }
  |
    ( member = ClassOrInterfaceBodyDecl(typeKind) { ret = ret.append(member); } )*
  )
  { return enRun(ret, MemberDecl.membersShape); }
}

MemberDecl ClassOrInterfaceBodyDecl(TypeKind typeKind):
{
   NodeList modifiers;
   MemberDecl ret;
}
{
  { run(); }

  (
    ";" { ret = enRun(new EmptyMemberDecl()); }
  |
    modifiers = Modifiers()
    {
      if (modifiers != null && modifiers.contains(Modifier.Default) && typeKind != TypeKind.Interface)
        throwParseException(token, "Only interfaces can have default members");
    }
    (
      LOOKAHEAD( "{" )
      ret = InitializerDecl(modifiers)
      {
        if (typeKind == TypeKind.Interface)
	      throwParseException(token, "An interface cannot have initializers");
	  }
    |
      ret = ClassOrInterfaceDecl(modifiers)
    |
      ret = EnumDecl(modifiers)
    |
      ret = AnnotationTypeDecl(modifiers)
    |
      LOOKAHEAD( [ TypeParameters() ] Name() "(" )
      ret = ConstructorDecl(modifiers)
      {
        if (typeKind == TypeKind.Interface)
	      throwParseException(token, "An interface cannot have constructors");
	  }
    |
      LOOKAHEAD( Type() Name() ( "[" "]" )* ( "," | "=" | ";" ) )
      ret = FieldDecl(modifiers)
    |
      ret = MethodDecl(modifiers)
    )
  )

  { return ret; }
}

FieldDecl FieldDecl(NodeList modifiers):
{
	Type type;
	NodeList variables = new NodeList();
	VariableDeclarator val;
}
{
  // Run is started before modifiers

  type = Type(null) variables = VariableDeclarators() ";"

  { return enRun(new FieldDecl(modifiers, type, variables)); }
}

LocalVariableDecl VariableDecl(NodeList modifiers):
{
	Type type;
	NodeList variables = new NodeList();
}
{
  // Run is started before modifiers

  type = Type(null) variables = VariableDeclarators()

  { return enRun(new LocalVariableDecl(modifiers, type, variables)); }
}

NodeList VariableDeclarators():
{
	NodeList variables = new NodeList();
	VariableDeclarator val;
}
{
  { run(); }

        val = VariableDeclarator() { variables = variables.append(val); }
  ( "," val = VariableDeclarator() { variables = variables.append(val); } )*

  { return enRun(variables, VariableDeclarator.listShape); }
}

VariableDeclarator VariableDeclarator():
{
	VariableDeclaratorId id;
	NodeOption<Expr> init = NodeOption.none();
	Expr initExpr = null;
}
{
  { run(); }

  id = VariableDeclaratorId()
  [
    { run(); }
    "=" initExpr = VariableInitializer()
    { init = enRun(init.set(initExpr), VariableDeclarator.initializerShape); }
  ]

  { return enRun(new VariableDeclarator(id, init)); }
}

VariableDeclaratorId VariableDeclaratorId():
{
	Name name;
	NodeList arrayDims;
}
{
  { run(); }

  name = Name() arrayDims = ArrayDims()

  { return enRun(new VariableDeclaratorId(name, arrayDims)); }
}

NodeList ArrayDims():
{
	NodeList arrayDims = new NodeList();
	NodeList<AnnotationExpr> annotations;
}
{
  { run(); }
  (
    LOOKAHEAD( Annotations() "[" "]" )
    { run(); }
    annotations = Annotations() "[" "]"
    { arrayDims = arrayDims.append(enRun(new ArrayDim(annotations))); }
  )*
  { return enRun(arrayDims, ArrayDim.listShape); }
}

Expr VariableInitializer():
{
	Expr ret;
}
{
  ( ret = ArrayInitializer() | ret = Expression() )
  { return ret; }
}

ArrayInitializerExpr ArrayInitializer():
{
	NodeList values = new NodeList();
	Expr val;
}
{
  { run(); }

  "{"
  [
    { run(); }
    val = VariableInitializer() { values = values.append(val); }
    ( LOOKAHEAD(2) "," val = VariableInitializer() { values = values.append(val); } )*
    { values = enRun(values, Expr.listShape); }
  ]
  [ "," ] // TODO Add syntactic data about comma presence in ArrayInitializerExpr
  "}"

  { return enRun(new ArrayInitializerExpr(values)); }
}

MethodDecl MethodDecl(NodeList modifiers):
{
	NodeList typeParameters = null;
	Type type;
	Name name;
	NodeList parameters;
	NodeList arrayDims;
	NodeList throwsClause = null;
	BlockStmt block = null;
}
{
  // Run is started before modifiers

  [ typeParameters = TypeParameters() ]
  type = ResultType()
  name = Name() parameters = FormalParameterList() arrayDims = ArrayDims()
  [ throwsClause = ThrowsClause() ]
  (
    block = Block()
  |
    ";"
    {
      if(modifiers != null && modifiers.contains(Modifier.Default))
	    throwParseException(token, "\"default\" methods must have a body");
	}
  )

  { return enRun(new MethodDecl(modifiers, ensureNotNull(typeParameters), type, name, parameters, arrayDims, ensureNotNull(throwsClause), NodeOption.of(block))); }
}

NodeList FormalParameterList():
{
	NodeList ret = new NodeList();
	FormalParameter par;
}
{
  { run(); }
  "("
  [
    par = FormalParameter() { ret = ret.append(par); }
    ( "," par = FormalParameter() { ret = ret.append(par); } )*
  |
    LOOKAHEAD({quotesMode})
    <NODE_LIST_VARIABLE> { ret = makeVar(getToken(0)); }
  ]
  ")"
  { return enRun(ret, FormalParameter.listShape); }
}

FormalParameter FormalParameter():
{
	NodeList modifiers;
	Type type;
	boolean isVarArg = false;
	VariableDeclaratorId id;
}
{
  { run(); }

  modifiers = Modifiers() type = Type(null) [ "..." { isVarArg = true; } ] id = VariableDeclaratorId()

  { return enRun(new FormalParameter(modifiers, type, isVarArg, id)); }
}


NodeList ThrowsClause():
{
   NodeList ret = new NodeList();
   QualifiedType cit;
}
{
  { run(); }

  "throws" cit = AnnotatedQualifiedType() { ret = ret.append(cit); }
  ( "," cit = AnnotatedQualifiedType() { ret = ret.append(cit); } )*

  { return enRun(ret, QualifiedType.throwsClauseShape); }
}

ConstructorDecl ConstructorDecl(NodeList modifiers):
{
	NodeList typeParameters = null;
	Name name;
	NodeList parameters;
	NodeList throwsClause = null;
	ExplicitConstructorInvocationStmt exConsInv = null;
	BlockStmt block;
	NodeList stmts = new NodeList();
	Stmt stmt;
}
{
  // Run is started before modifiers

  [ typeParameters = TypeParameters() ]
  name = Name() parameters = FormalParameterList()
  [ throwsClause = ThrowsClause() ]

  { run(); }
  "{"
  { run(); }
  [ LOOKAHEAD(ExplicitConstructorInvocation()) stmt = ExplicitConstructorInvocation() { stmts = stmts.append(stmt); } ]
  ( LOOKAHEAD(2) stmt = BlockStatement() { stmts = stmts.append(stmt); } )*
  { stmts = enRun(stmts, Stmt.listShape); }
  "}"
  { block = enRun(new BlockStmt(stmts)); }

  { return enRun(new ConstructorDecl(modifiers, ensureNotNull(typeParameters), name, parameters, ensureNotNull(throwsClause), block)); }
}

ExplicitConstructorInvocationStmt ExplicitConstructorInvocation():
{
	boolean isThis = false;
	NodeList args;
	Expr expr = null;
	NodeList typeArgs = null;
}
{
  { run(); }

  (
    LOOKAHEAD([ TypeArguments() ] "this" "(")
    [ typeArgs = TypeArguments() ]
    "this" { isThis = true; }
    args = Arguments() ";"
  |
    [
      LOOKAHEAD( PrimaryExpressionWithoutSuperSuffix() "." )
      expr = PrimaryExpressionWithoutSuperSuffix() "."
    ]
    [ typeArgs = TypeArguments() ]
    "super"
    args = Arguments() ";"
  )

  { return enRun(new ExplicitConstructorInvocationStmt(ensureNotNull(typeArgs), isThis, NodeOption.of(expr), args)); }
}

NodeList Statements():
{
	NodeList ret = null;
	Stmt stmt;
}
{
  { run(); }
  ( LOOKAHEAD(2) stmt = BlockStatement() { ret = append(ret, stmt); } )*
  { return enRun(ret, Stmt.listShape); }
}

InitializerDecl InitializerDecl(NodeList modifiers):
{
	BlockStmt block;
}
{
  // Run is started before modifiers

  block = Block()

  { return enRun(new InitializerDecl(modifiers, block)); }
}


/**********************************************************************************************************************
 * Types
 **********************************************************************************************************************/

Type Type(NodeList<AnnotationExpr> annotations):
{
	Type ret;
}
{
  // Run may be started before annotations

  (
    LOOKAHEAD(2) ret = ReferenceType(annotations)
  |
    ret = PrimitiveType(annotations)
  )
  { return ret; }
}

ReferenceType ReferenceType(NodeList<AnnotationExpr> annotations):
{
	ReferenceType type;
}
{
  // Run may be started before annotations

  (
    LOOKAHEAD( ( PrimitiveType() | QualifiedType() ) ArrayDimsMandatory() )
    type = ArrayType(annotations)
  |
    type = QualifiedType(annotations)
  )

  { return type; }
}

ArrayType ArrayType(NodeList<AnnotationExpr> annotations):
{
	Type type;
	NodeList arrayDims;
}
{
  // Run may be started before annotations

  ( type = PrimitiveType(annotations) | type = QualifiedType(annotations) )
  { lateRun(); }
  arrayDims = ArrayDimsMandatory()

  { return enRun(new ArrayType(type, arrayDims)); }
}

QualifiedType QualifiedType(NodeList<AnnotationExpr> annotations):
{
    NodeOption<QualifiedType> scope = NodeOption.<QualifiedType>none();
	QualifiedType ret;
	Name name;
	NodeList<Type> typeArgs = null;
}
{
  // Run may be started before annotations
  {
    if (annotations == null) {
      run();
      annotations = new NodeList<AnnotationExpr>();
    }
  }

  name = Name()
  [ LOOKAHEAD(2) typeArgs = TypeArgumentsOrDiamond() ]
  { ret = enRun(new QualifiedType(annotations, scope, name, NodeOption.of(typeArgs))); }
  (
    LOOKAHEAD(2)
    { lateRun(); } "." { scope = enRun(scope.set(ret), QualifiedType.scopeShape); }

    { lateRun(); }
    annotations = Annotations() name = Name()
    [ LOOKAHEAD(2) typeArgs = TypeArgumentsOrDiamond() ]
    { ret = enRun(new QualifiedType(annotations, scope, name, NodeOption.of(typeArgs))); }
  )*

  { return ret; }
}

NodeList TypeArguments():
{
	NodeList ret = new NodeList();
	Type type;
}
{
  { run(); }
  "<"
  [ ret = TypeArgumentList() ]
  ">"
  { return enRun(ret, Type.typeArgumentsShape); }
}


NodeList<Type> TypeArgumentsOrDiamond():
{
	NodeList ret = new NodeList();
	Type type;
}
{
  { run(); }
  "<"
  [ ret = TypeArgumentList() ]
  ">"
  { return enRun(ret, Type.typeArgumentsOrDiamondShape); }
}

NodeList TypeArgumentList():
{
	NodeList ret = new NodeList();
	Type type;
}
{
  type = TypeArgument() { ret = ret.append(type); }
  ( "," type = TypeArgument() { ret = ret.append(type); } )*
  { return ret; }
|
  LOOKAHEAD({quotesMode})
  <NODE_LIST_VARIABLE> { return makeVar(getToken(0)); }
}

Type TypeArgument():
{
	Type ret;
	NodeList<AnnotationExpr> annotations = null;
}
{
  { run(); }
  annotations = Annotations()
  (
    ret = ReferenceType(annotations)
  |
    ret = Wildcard(annotations)
  )
  { return ret; }
}

WildcardType Wildcard(NodeList<AnnotationExpr> annotations):
{
	ReferenceType ext = null;
	ReferenceType sup = null;
	NodeList boundAnnotations = null;
}
{
  // Run may be started before annotations
  {
    if (annotations == null) {
      run();
      annotations = new NodeList<AnnotationExpr>();
    }
  }

  "?"
  [ "extends" { run(); } boundAnnotations = Annotations() ext = ReferenceType(boundAnnotations)
  | "super" { run(); } boundAnnotations = Annotations() sup = ReferenceType(boundAnnotations) ]
  { return enRun(new WildcardType(annotations, NodeOption.of(ext), NodeOption.of(sup))); }
}

PrimitiveType PrimitiveType(NodeList<AnnotationExpr> annotations):
{
	PrimitiveType.Primitive primitive;
}
{
  // Run may be started before annotations
  {
    if (annotations == null) {
      run();
      annotations = new NodeList<AnnotationExpr>();
    }
  }

  ( "boolean" { primitive = PrimitiveType.Primitive.Boolean; }
  | "char"    { primitive = PrimitiveType.Primitive.Char; }
  | "byte"    { primitive = PrimitiveType.Primitive.Byte; }
  | "short"   { primitive = PrimitiveType.Primitive.Short; }
  | "int"     { primitive = PrimitiveType.Primitive.Int; }
  | "long"    { primitive = PrimitiveType.Primitive.Long; }
  | "float"   { primitive = PrimitiveType.Primitive.Float; }
  | "double"  { primitive = PrimitiveType.Primitive.Double; } )
  { return enRun(new PrimitiveType(annotations, primitive)); }
}

Type ResultType():
{
	Type ret;
}
{
  (
    { run(); } "void" { ret = enRun(new VoidType()); }
  |
    ret = Type(null)
  )
  { return ret; }
}

NodeList QualifiedTypeList():
{
	NodeList ret = new NodeList();
	QualifiedType type;
}
{
  { run(); }

  type = AnnotatedQualifiedType() { ret = ret.append(type); }
  ( "," type = AnnotatedQualifiedType() { ret = ret.append(type); } )*

  { return enRun(ret); }
}

QualifiedType AnnotatedQualifiedType():
{
    NodeList<AnnotationExpr> annotations;
	QualifiedType ret;
}
{
  { run(); }
  annotations = Annotations() ret = QualifiedType(annotations)
  { return ret; }
}

/**********************************************************************************************************************
 * Names
 **********************************************************************************************************************/

QualifiedName QualifiedName():
{
    NodeOption<QualifiedName> qualifier = NodeOption.none();
	QualifiedName ret = null;
	Name name;
}
{
  { run(); } name = Name() { ret = enRun(new QualifiedName(qualifier, name)); }
  (
    LOOKAHEAD("." Name())
    { lateRun(); } "." { qualifier = enRun(qualifier.set(ret), QualifiedName.qualifierShape); }
    { lateRun(); }
    name = Name() { ret = enRun(new QualifiedName(qualifier, name)); }
  )*
  { return ret; }
}

Name Name():
{
  Name name;
}
{
  (
    { run(); }
    <IDENTIFIER>
    { name = enRun(new Name(token.image)); }
  |
    LOOKAHEAD({quotesMode})
    <NODE_VARIABLE> { name = makeVar(token); }
  )
  { return name; }
}

/**********************************************************************************************************************
 * Expressions
 **********************************************************************************************************************/

Expr Literal():
{
	Expr ret;
}
{
  { run(); }
  (
    <INTEGER_LITERAL>   { ret = new LiteralExpr<Integer>(Integer.class, token.image); }
  |
    <LONG_LITERAL>      { ret = new LiteralExpr<Long>(Long.class, token.image); }
  |
    <FLOAT_LITERAL>     { ret = new LiteralExpr<Float>(Float.class, token.image); }
  |
    <DOUBLE_LITERAL>    { ret = new LiteralExpr<Double>(Double.class, token.image); }
  |
    <CHARACTER_LITERAL> { ret = new LiteralExpr<Character>(Character.class, token.image); }
  |
    <STRING_LITERAL>    { ret = new LiteralExpr<String>(String.class, token.image); }
  |
    "true"  { ret = new LiteralExpr<Boolean>(Boolean.class, token.image); }
  |
    "false" { ret = new LiteralExpr<Boolean>(Boolean.class, token.image); }
  |
    "null"  { ret = new LiteralExpr<Void>(Void.class, token.image); }
  )
  { return enRun(ret); }
}

Expr PrimaryExpression():
{
	Expr ret;
	Expr inner;
}
{
  ret = PrimaryPrefix() ( LOOKAHEAD(2) { lateRun(); } ret = PrimarySuffix(ret) )*
  { return ret; }
}

Expr PrimaryExpressionWithoutSuperSuffix():
{
	Expr ret;
	Expr inner;
}
{
  ret = PrimaryPrefix() ( LOOKAHEAD( PrimarySuffixWithoutSuper() ) { lateRun(); } ret = PrimarySuffixWithoutSuper(ret) )*
  { return ret; }
}

Expr PrimaryPrefix():
{
	Expr ret = null;
	Name name;
	NodeList typeArgs = null;
	NodeList args = null;
	boolean hasArgs = false;
	boolean isLambda = false;
	Type type;
	FormalParameter p = null;
	VariableDeclaratorId id = null;
}
{
  (
    ret = Literal()
  |
    { run(); } "this" { ret = enRun(new ThisExpr(NodeOption.<Expr>none())); }
  |
    { run(); } "super" { ret = enRun(new SuperExpr(NodeOption.<Expr>none())); }
	(
	  { lateRun(); }
	  "."
	  (
        LOOKAHEAD( [ TypeArguments() ] Name() "(" )
        ret = MethodInvocation(ret)
	  |
	    ret = FieldAccess(ret)
	  )
	|
	  { lateRun(); }
	  ret = MethodReferenceSuffix(ret)
	)
  |
    { run(); } "(" ret = Expression() ")" { ret = enRun(new ParenthesizedExpr(ret)); }
  |
    ret = AllocationExpression(null)
  |
    LOOKAHEAD( ResultType() "." "class" )
    { run(); } type = ResultType() "." "class" { ret = enRun(new ClassExpr(type)); }
  |
    LOOKAHEAD (ResultType() "::" )
    { run(); }
    type = ResultType() { ret = new TypeExpr(type); }
    ret = MethodReferenceSuffix(ret)
  |
    LOOKAHEAD( [ TypeArguments() ] Name() "(" )
    { run(); }
    ret = MethodInvocation(null)
  |
    ret = Name()
  )
  { return ret; }
}

Expr PrimarySuffix(Expr scope):
{
	Expr ret;
}
{
  // Run is started before scope

  (
    LOOKAHEAD(2)
    ret = PrimarySuffixWithoutSuper(scope)
  |
    "." "super" { ret = enRun(new SuperExpr(NodeOption.of(scope))); }
  |
    ret = MethodReferenceSuffix(scope)
  )
  { return ret; }
}

Expr PrimarySuffixWithoutSuper(Expr scope):
{
	Expr ret;
	Name name;
}
{
  // Run is started before scope

  (
    "."
    (
      "this" { ret = enRun(new ThisExpr(NodeOption.of(scope))); }
    |
      ret = AllocationExpression(scope)
    |
      LOOKAHEAD( [ TypeArguments() ] Name() "(" )
      ret = MethodInvocation(scope)
    |
      ret = FieldAccess(scope)
    )
  |
    "[" ret = Expression() "]" { ret = enRun(new ArrayAccessExpr(scope, ret)); }
  )

  { return ret; }
}

Expr FieldAccess(Expr scope):
{
    Name name;
}
{
  // Run is started before scope

  name = Name()
  { return enRun(new FieldAccessExpr(NodeOption.of(scope), name)); }
}

Expr MethodInvocation(Expr scope):
{
    NodeList typeArgs = null;
    Name name;
    NodeList args = null;
	Expr ret;
}
{
  // Run is started before scope

  [ typeArgs = TypeArguments() ] name = Name()
  args = Arguments()
  { return enRun(new MethodInvocationExpr(NodeOption.of(scope), ensureNotNull(typeArgs), name, args)); }
}

NodeList Arguments():
{
	NodeList ret = new NodeList();
	Expr expr;
}
{
  { run(); }
  "("
  [
    LOOKAHEAD({quotesMode})
    <NODE_LIST_VARIABLE> { ret = makeVar(getToken(0)); }
  |
    expr = Expression() { ret = ret.append(expr); }
    ( "," expr = Expression() { ret = ret.append(expr); } )*
  ]
  ")"
  { return enRun(ret, Expr.argumentsShape); }
}

Expr MethodReferenceSuffix(Expr scope):
{
    NodeList typeArgs = null;
    Name name;
	Expr ret;
}
{
  // Run is started before scope

  "::" [typeArgs = TypeArguments() ]
  ( name = Name() | "new" { name = new Name("new"); } )
  { ret = enRun(new MethodReferenceExpr(scope, ensureNotNull(typeArgs), name)); }
  { return ret; }
}

Expr AllocationExpression(Expr scope):
{
	Expr ret;
	Type type;
	NodeList typeArgs = null;
	NodeList<MemberDecl> anonymousBody = null;
	NodeList args;
	NodeList<AnnotationExpr> annotations = null;
}
{
  // Run may be started before scope
  { if (scope == null) run(); }

  "new"
  [ typeArgs = TypeArguments() ]

  { run(); }
  annotations = Annotations()
  (
    type = PrimitiveType(annotations)
    ret = ArrayCreationExpr(type)
  |
	type = QualifiedType(annotations)
    (
	  ret = ArrayCreationExpr(type)
	|
	  args = Arguments() [ LOOKAHEAD( "{" ) anonymousBody = ClassOrInterfaceBody(TypeKind.Class) ]
      { ret = enRun(new ObjectCreationExpr(NodeOption.of(scope), ensureNotNull(typeArgs), (QualifiedType) type, args, NodeOption.of(anonymousBody))); }
    )
  )
  { return ret; }
}

Expr ArrayCreationExpr(Type componentType):
{
	Expr expr;
	NodeList arrayDimExprs = new NodeList();
	NodeList arrayDims = new NodeList();
	NodeList<AnnotationExpr> annotations = null;
	ArrayInitializerExpr initializer;
}
{
  (
    LOOKAHEAD( Annotations() "[" Expression() "]" )
    arrayDimExprs = ArrayDimExprsMandatory()
    arrayDims = ArrayDims()
    { return enRun(new ArrayCreationExpr(componentType, arrayDimExprs, arrayDims, NodeOption.<ArrayInitializerExpr>none())); }
  |
    arrayDims = ArrayDimsMandatory()
    initializer = ArrayInitializer()
    { return enRun(new ArrayCreationExpr(componentType, arrayDimExprs, arrayDims, NodeOption.of(initializer))); }
  )
}

NodeList ArrayDimExprsMandatory():
{
	NodeList arrayDimExprs = new NodeList();
	NodeList<AnnotationExpr> annotations;
	Expr expr;
}
{
  { run(); }
  (
    LOOKAHEAD( Annotations() "[" Expression() "]" )
    { run(); }
    annotations = Annotations() "[" expr = Expression() "]"
    { arrayDimExprs = arrayDimExprs.append(enRun(new ArrayDimExpr(annotations, expr))); }
  )+
  { return enRun(arrayDimExprs, ArrayDimExpr.listShape); }
}

NodeList ArrayDimsMandatory():
{
	NodeList arrayDims = new NodeList();
	NodeList<AnnotationExpr> annotations;
}
{
  { run(); }
  (
    LOOKAHEAD( Annotations() "[" "]" )
    { run(); }
    annotations = Annotations() "[" "]"
    { arrayDims = arrayDims.append(enRun(new ArrayDim(annotations))); }
  )+
  { return enRun(arrayDims, ArrayDim.listShape); }
}

Expr Expression():
{
	Expr ret;
}
{
  (
    LOOKAHEAD( CastLambdaExpression() ) ret = CastLambdaExpression()
  |
    ret = AssignmentExpression()
  )
  { return ret; }
}

Expr AssignmentExpression():
// FIXME
// This expansion has been written this way instead of :
//   Assignment() | ConditionalExpression()
// for performance reasons.
// However, it is a weakening of the grammar for it allows the LHS of
// assignments to be any conditional Expr whereas it can only be
// a primary Expr.  Consider adding a semantic predicate to work
// around this.
{
	Expr ret;
	AssignExpr.AssignOp op;
	Expr value;
}
{
  ret = ConditionalExpression()
  [
    LOOKAHEAD(2)
    { lateRun(); } op = AssignmentOperator() value = Expression()
    { ret = enRun(new AssignExpr(ret, op, value)); }
  ]
  { return ret; }
}

Expr CastLambdaExpression():
{
	Expr ret;
	Type type;
	NodeList types = new NodeList();
	NodeList<AnnotationExpr> annotations = null;
}
{
  (
    LOOKAHEAD( LambdaParameters() "->" )
    ret = LambdaExpression()
  |
    { run(); }
    "("
    { run(); } annotations = Annotations()

    type = ReferenceType(annotations)
    { types = types.append(type); }
    [
      LOOKAHEAD("&")
      (
        { lateRun(); } "&"
        { run(); } annotations = Annotations() type = ReferenceType(annotations)
        { types = types.append(type); }
      )+
      {
        types = enRun(types, Type.intersectionShape);
        type = new IntersectionType(types);
      }
    ]
    ")"
    ret = CastLambdaExpression()
    { ret = enRun(new CastExpr(type, ret)); }
  )
  { return ret; }
}

LambdaExpr LambdaExpression():
{
  ByRef<Boolean> parenthesis = new ByRef<Boolean>();
  NodeList parameters;
  BlockStmt block;
  Expr expr;
  LambdaExpr ret;
}
{
  { run(); }
  parameters = LambdaParameters(parenthesis)
  "->"
  (
    expr = Expression() { ret = enRun(new LambdaExpr(parameters, parenthesis.value, expr)); }
  |
    block = Block() { ret = enRun(new LambdaExpr(parameters, parenthesis.value, block)); }
  )
  { return ret; }
}

NodeList LambdaParameters(ByRef<Boolean> parenthesis):
{
  NodeList ret;
  FormalParameter param;
}
{
  (
    { run(); }
    param = InferredFormalParameter()
    {
      parenthesis.value = false;
      ret = enRun(new NodeList(param));
    }
  |
    (
      LOOKAHEAD(InferredFormalParameterList()) ret = InferredFormalParameterList()
    |
      ret = FormalParameterList()
    )
    { parenthesis.value = true; }
  )
  { return ret; }
}

NodeList InferredFormalParameterList():
{
  NodeList ret = new NodeList();
  FormalParameter param;
}
{
  { run(); }
  "("
  param = InferredFormalParameter() { ret = ret.append(param); }
  ( "," param = InferredFormalParameter() { ret = ret.append(param); } )*
  ")"
  { return enRun(ret); }
}

FormalParameter InferredFormalParameter():
{
  Name name;
}
{
  { run(); }
  name = Name()
  {
    return enRun(
      new FormalParameter(NodeList.<ExtendedModifier>empty(), new UnknownType(), false,
        new VariableDeclaratorId(name, NodeList.<ArrayDim>empty())
      )
    );
  }
}

AssignExpr.AssignOp AssignmentOperator():
{
	AssignExpr.AssignOp ret;
}
{
  ( "="    { ret = AssignExpr.AssignOp.Normal; }
  | "*="   { ret = AssignExpr.AssignOp.Times; }
  | "/="   { ret = AssignExpr.AssignOp.Divide; }
  | "%="   { ret = AssignExpr.AssignOp.Remainder; }
  | "+="   { ret = AssignExpr.AssignOp.Plus; }
  | "-="   { ret = AssignExpr.AssignOp.Minus; }
  | "<<="  { ret = AssignExpr.AssignOp.LeftShift; }
  | ">>="  { ret = AssignExpr.AssignOp.RightSignedShift; }
  | ">>>=" { ret = AssignExpr.AssignOp.RightUnsignedShift; }
  | "&="   { ret = AssignExpr.AssignOp.And; }
  | "^="   { ret = AssignExpr.AssignOp.XOr; }
  | "|="   { ret = AssignExpr.AssignOp.Or; } )
  { return ret; }
}

Expr ConditionalExpression():
{
	Expr ret;
	Expr left;
	Expr right;
}
{
  ret = ConditionalOrExpression()
  [
    { lateRun(); } "?" left = Expression() ":" right = ConditionalExpression()
    { ret = enRun(new ConditionalExpr(ret, left, right)); }
  ]
  { return ret; }
}

Expr ConditionalOrExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = ConditionalAndExpression()
  (
    { lateRun(); } "||" right = ConditionalAndExpression()
    { ret = enRun(new BinaryExpr(ret, BinaryExpr.BinaryOp.Or, right)); }
  )*
  { return ret; }
}

Expr ConditionalAndExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = InclusiveOrExpression()
  (
    { lateRun(); } "&&" right = InclusiveOrExpression()
    { ret = enRun(new BinaryExpr(ret, BinaryExpr.BinaryOp.And, right)); }
  )*
  { return ret; }
}

Expr InclusiveOrExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = ExclusiveOrExpression()
  (
    { lateRun(); } "|" right = ExclusiveOrExpression()
    { ret = enRun(new BinaryExpr(ret, BinaryExpr.BinaryOp.BinOr, right)); }
  )*
  { return ret; }
}

Expr ExclusiveOrExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = AndExpression()
  (
    { lateRun(); } "^" right = AndExpression()
    { ret = enRun(new BinaryExpr(ret, BinaryExpr.BinaryOp.XOr, right)); }
  )*
  { return ret; }
}

Expr AndExpression():
{
	Expr ret;
	Expr right;
}
{
  ret = EqualityExpression()
  (
    { lateRun(); } "&" right = EqualityExpression()
    { ret = enRun(new BinaryExpr(ret, BinaryExpr.BinaryOp.BinAnd, right)); }
  )*
  { return ret; }
}

Expr EqualityExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = InstanceOfExpression()
  (
    { lateRun(); }
    ( "==" { op = BinaryExpr.BinaryOp.Equal; } |
      "!=" { op = BinaryExpr.BinaryOp.NotEqual; } )
    right = InstanceOfExpression()
    { ret = enRun(new BinaryExpr(ret, op, right)); }
  )*
  { return ret; }
}

Expr InstanceOfExpression():
{
	Expr ret;
	NodeList<AnnotationExpr> annotations;
	Type type;
}
{
  ret = RelationalExpression()
  [
    { lateRun(); } "instanceof"
    { run(); } annotations = Annotations() type = Type(annotations)
    { ret = enRun(new InstanceOfExpr(ret, type)); }
  ]
  { return ret; }
}

Expr RelationalExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = ShiftExpression()
  (
    { lateRun(); }
  	( "<"  { op = BinaryExpr.BinaryOp.Less; } |
  	  ">"  { op = BinaryExpr.BinaryOp.Greater; } |
  	  "<=" { op = BinaryExpr.BinaryOp.LessOrEqual; } |
  	  ">=" { op = BinaryExpr.BinaryOp.GreaterOrEqual; } )
  	right = ShiftExpression()
  	{ ret = enRun(new BinaryExpr(ret, op, right)); }
  )*
  { return ret; }
}

Expr ShiftExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = AdditiveExpression()
  (
    { lateRun(); }
  	( "<<"             { op = BinaryExpr.BinaryOp.LeftShift; } |
  	  RSIGNEDSHIFT()   { op = BinaryExpr.BinaryOp.RightSignedShift; } |
  	  RUNSIGNEDSHIFT() { op = BinaryExpr.BinaryOp.RightUnsignedShift; } )
  	right = AdditiveExpression()
  	{ ret = enRun(new BinaryExpr(ret, op, right)); }
  )*
  { return ret; }
}

Expr AdditiveExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = MultiplicativeExpression()
  (
    { lateRun(); }
  	( "+" { op = BinaryExpr.BinaryOp.Plus; } |
  	  "-" { op = BinaryExpr.BinaryOp.Minus; } )
  	right = MultiplicativeExpression()
  	{ ret = enRun(new BinaryExpr(ret, op, right)); }
  )*
  { return ret; }
}

Expr MultiplicativeExpression():
{
	Expr ret;
	Expr right;
	BinaryExpr.BinaryOp op;
}
{
  ret = UnaryExpression()
  (
    { lateRun(); }
  	( "*" { op = BinaryExpr.BinaryOp.Times; } |
  	  "/" { op = BinaryExpr.BinaryOp.Divide; } |
  	  "%" { op = BinaryExpr.BinaryOp.Remainder; } )
  	right = UnaryExpression()
  	{ ret = enRun(new BinaryExpr(ret, op, right)); }
  )*
  { return ret; }
}

Expr UnaryExpression():
{
	Expr ret;
	UnaryExpr.UnaryOp op;
}
{
  (
    ret = PreIncrementDecrementExpression()
  |
    { run(); }
    ( "+" { op = UnaryExpr.UnaryOp.Positive; } |
      "-" { op = UnaryExpr.UnaryOp.Negative; } )
    ret = UnaryExpression()
    { ret = enRun(new UnaryExpr(op, ret)); }
  |
    ret = UnaryExpressionNotPlusMinus()
  )
  { return ret; }
}

Expr PreIncrementDecrementExpression():
{
	UnaryExpr.UnaryOp op;
	Expr ret;
}
{
  { run(); }
  ( "++" { op = UnaryExpr.UnaryOp.PreIncrement; } |
    "--" { op = UnaryExpr.UnaryOp.PreDecrement; } )
  ret = UnaryExpression()
  { return enRun(new UnaryExpr(op, ret)); }
}

Expr UnaryExpressionNotPlusMinus():
{
	Expr ret;
	UnaryExpr.UnaryOp op;
}
{
  (
    { run(); }
	( "~" { op = UnaryExpr.UnaryOp.Inverse; } |
	  "!" { op = UnaryExpr.UnaryOp.Not; } )
	ret = UnaryExpression()
	{ ret = enRun(new UnaryExpr(op, ret)); }
  |
    LOOKAHEAD( CastExpression() )
    ret = CastExpression()
  |
    ret = PostfixExpression()
  )
  { return ret; }
}

Expr PostIncrementDecrementExpression():
{
	Expr ret;
	UnaryExpr.UnaryOp op;
}
{
  ret = PrimaryExpression()
  [
  	LOOKAHEAD(2)
    { lateRun(); }
    ( "++" { op = UnaryExpr.UnaryOp.PostIncrement; } |
      "--" { op = UnaryExpr.UnaryOp.PostDecrement; } )
    { ret = enRun(new UnaryExpr(op, ret)); }
  ]
  { return ret; }
}

Expr PostfixExpression():
{
	Expr ret;
}
{
  ret = PostIncrementDecrementExpression()
  { return ret; }
}

Expr CastExpression():
{
	Expr ret;
	Type type;
	NodeList types = new NodeList();
	NodeList<AnnotationExpr> annotations = null;
}
{
  { run(); }
  "("
  { run(); } annotations = Annotations()
  (
    LOOKAHEAD(2)
    type = PrimitiveType(annotations)
    ")" ret = UnaryExpression()
    { ret = enRun(new CastExpr(type, ret)); }
  |
    type = ReferenceType(annotations)
    { types = types.append(type); }
    [
      LOOKAHEAD("&")
      (
        { lateRun(); } "&"
        { run(); } annotations = Annotations() type = ReferenceType(annotations)
        { types = types.append(type); } )+
      {
        types = enRun(types, Type.intersectionShape);
        type = new IntersectionType(types);
      }
    ]
    ")" ret = UnaryExpressionNotPlusMinus()
    { ret = enRun(new CastExpr(type, ret)); }
  )
  { return ret; }
}

/**********************************************************************************************************************
 * Statements
 **********************************************************************************************************************/

Stmt Statement():
{
	Stmt ret;
}
{
  (
	  LOOKAHEAD(2)
	  ret = LabeledStatement()
	|
	  ret = AssertStatement()
	|
	  ret = Block()
	|
	  ret = EmptyStatement()
	|
	  ret = StatementExpression()
	|
	  ret = SwitchStatement()
	|
	  ret = IfStatement()
	|
	  ret = WhileStatement()
	|
	  ret = DoStatement()
	|
	  ret = ForStatement()
	|
	  ret = BreakStatement()
	|
	  ret = ContinueStatement()
	|
	  ret = ReturnStatement()
	|
	  ret = ThrowStatement()
	|
	  ret = SynchronizedStatement()
	|
	  ret = TryStatement()
  )
  { return ret; }
}

AssertStmt AssertStatement():
{
	Expr check;
	Expr msg = null;
}
{
  { run(); }
  "assert" check = Expression() [ ":" msg = Expression() ] ";"
  { return enRun(new AssertStmt(check, NodeOption.of(msg)));  }
}

LabeledStmt LabeledStatement():
{
	Name label;
	Stmt stmt;
}
{
  { run(); }
  label = Name() ":" stmt = Statement()
  { return enRun(new LabeledStmt(label, stmt)); }
}

BlockStmt Block():
{
	NodeList stmts;
}
{
  { run(); }
  "{" stmts = Statements() "}"
  { return enRun(new BlockStmt(ensureNotNull(stmts))); }
}

/*
 * Classes inside block stametents can only be abstract or final. The semantic must check it.
 */
Stmt BlockStatement():
{
	Stmt ret;
	Expr expr;
	TypeDecl typeDecl;
	NodeList modifiers;
}
{
  (
    LOOKAHEAD( Modifiers() ("class" | "interface") )
    { run(); }
    { run(); } modifiers = Modifiers() typeDecl = ClassOrInterfaceDecl(modifiers)
    { ret = enRun(new TypeDeclarationStmt(typeDecl)); }
  |
    LOOKAHEAD( VariableDeclExpression() )
    { run(); }
    expr = VariableDeclExpression() ";"
    { ret = enRun(new ExpressionStmt(expr)); }
  |
    ret = Statement()
  )
  { return ret; }
}

VariableDeclarationExpr VariableDeclExpression():
{
	NodeList modifiers;
	LocalVariableDecl variableDecl;
}
{
  { run(); }
  { run(); } modifiers = Modifiers() variableDecl = VariableDecl(modifiers)
  { return enRun(new VariableDeclarationExpr(variableDecl)); }
}

EmptyStmt EmptyStatement():
{}
{
  { run(); }
  ";"
  { return enRun(new EmptyStmt()); }
}

Stmt LambdaBody():
{
  Expr expr;
  Stmt n = null;
}
{
  (
    { run(); } expr = Expression() { n = enRun(new ExpressionStmt(expr)); }
  |
    n = Block()
  )
  { return n; }
}

ExpressionStmt StatementExpression():
{
	Expr expr;
	AssignExpr.AssignOp op;
	Expr value;
}
{
  // TODO Add Assignment, MethodInvocation and ClassInstanceCreationExpression
  { run(); }
  (
    LOOKAHEAD(2) expr = PreIncrementDecrementExpression()
  |
    expr = AssignmentExpression()
  )
  ";"
  { return enRun(new ExpressionStmt(expr)); }
}

SwitchStmt SwitchStatement():
{
	Expr selector;
	SwitchCase entry;
	NodeList entries = new NodeList();
}
{
  { run(); }
  "switch" "(" selector = Expression() ")" "{"
  { run(); }
  ( entry = SwitchEntry() { entries = entries.append(entry); } )*
  { entries = enRun(entries, SwitchCase.listShape); }
  "}"
  { return enRun(new SwitchStmt(selector, entries)); }
}

SwitchCase SwitchEntry():
{
	Expr label = null;
	NodeList stmts;
}
{
  { run(); }
  (
    "case" label = Expression()
  |
    "default"
  )
  ":" stmts = Statements()
  { return enRun(new SwitchCase(NodeOption.of(label), ensureNotNull(stmts))); }
}

IfStmt IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if Stmt.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
	Expr condition;
	Stmt thenStmt;
	Stmt elseStmt = null;
}
{
  { run(); }
  "if" "(" condition = Expression() ")" thenStmt = Statement() [ LOOKAHEAD(1) "else" elseStmt = Statement() ]
  { return enRun(new IfStmt(condition, thenStmt, NodeOption.of(elseStmt))); }
}

WhileStmt WhileStatement():
{
	Expr condition;
	Stmt body;
}
{
  { run(); }
  "while" "(" condition = Expression() ")" body = Statement()
  { return enRun(new WhileStmt(condition, body)); }
}

DoStmt DoStatement():
{
	Expr condition;
	Stmt body;
}
{
  { run(); }
  "do" body = Statement() "while" "(" condition = Expression() ")" ";"
  { return enRun(new DoStmt(body, condition)); }
}

Stmt ForStatement():
{
	String id = null;
	VariableDeclarationExpr varExpr = null;
	Expr expr = null;
	NodeList init = null;
	NodeList update = null;
	Stmt body;
}
{
  { run(); }
  "for" "("
  (
    LOOKAHEAD(VariableDeclExpression() ":")
    varExpr = VariableDeclExpression() ":" expr = Expression()
  |
    [ init = ForInit() ] ";" [ expr = Expression() ] ";" [ update = ForUpdate() ]
  )
  ")" body = Statement()
  {
  	if (varExpr != null) return enRun(new ForeachStmt(varExpr, expr, body));
  	else return enRun(new ForStmt(init, expr, update, body));
  }
}

NodeList ForInit():
{
	NodeList ret;
	Expr expr;
}
{
  (
    LOOKAHEAD( Modifiers() Type() Name() )
    { run(); }
    expr = VariableDeclExpression() { ret = new NodeList(); ret = ret.append(expr); }
    { ret = enRun(ret, Expr.listShape); }
  |
    ret = ExpressionList()
  )
  { return ret; }
}

NodeList ExpressionList():
{
	NodeList ret = new NodeList();
	Expr expr;
}
{
  { run(); }
  expr = Expression() { ret = ret.append(expr); } ( "," expr = Expression()  { ret = ret.append(expr); } )*
  { return enRun(ret, Expr.listShape); }
}

NodeList ForUpdate():
{
	NodeList ret;
}
{
  ret = ExpressionList()
  { return ret; }
}

BreakStmt BreakStatement():
{
	Name id = null;
}
{
  { run(); }
  "break" [ id = Name() ] ";"
  { return enRun(new BreakStmt(NodeOption.of(id))); }
}

ContinueStmt ContinueStatement():
{
	Name id = null;
}
{
  { run(); }
  "continue" [ id = Name() ] ";"
  { return enRun(new ContinueStmt(NodeOption.of(id))); }
}

ReturnStmt ReturnStatement():
{
	Expr expr = null;
}
{
  { run(); }
  "return" [ expr = Expression() ] ";"
  { return enRun(new ReturnStmt(NodeOption.of(expr))); }
}

ThrowStmt ThrowStatement():
{
	Expr expr;
}
{
  { run(); }
  "throw" expr = Expression() ";"
  { return enRun(new ThrowStmt(expr)); }
}

SynchronizedStmt SynchronizedStatement():
{
	Expr expr;
	BlockStmt block;
}
{
  { run(); }
  "synchronized" "(" expr = Expression() ")" block = Block()
  { return enRun(new SynchronizedStmt(expr, block)); }
}

TryStmt TryStatement():
// TODO Make catchClauses/finallyClause counts less fatal
{
	NodeList resources = null;
	BlockStmt tryBlock;
	BlockStmt finallyBlock = null;
	NodeList catchClauses = null;
}
{
  { run(); }
  "try"
  (
    resources = ResourceSpecification()
    tryBlock = Block()
    [ catchClauses = CatchClauses() ]
    [ "finally" finallyBlock = Block() ]
  |
    tryBlock = Block()
    (
      catchClauses = CatchClauses()
      [ "finally" finallyBlock = Block() ]
    |
      "finally" finallyBlock = Block()
    )
  )
  { return enRun(new TryStmt(ensureNotNull(resources), tryBlock, ensureNotNull(catchClauses), NodeOption.of(finallyBlock))); }
}

NodeList CatchClauses():
{
	NodeList catchClauses = new NodeList();
	CatchClause catchClause;
}
{
  { run(); }
  (
    catchClause = CatchClause() { catchClauses = catchClauses.append(catchClause); }
  )+
  { return enRun(catchClauses, CatchClause.listShape); }
}

CatchClause CatchClause():
{
	FormalParameter param;
	BlockStmt catchBlock;
}
{
  { run(); }
  "catch" "(" param = CatchFormalParameter() ")" catchBlock = Block()
  { return enRun(new CatchClause(param, catchBlock)); }
}

FormalParameter CatchFormalParameter():
{
	NodeList modifiers;
	Type exceptType;
	NodeList<Type> exceptTypes = new NodeList<Type>();
	VariableDeclaratorId exceptId;
}
{
  { run(); }
  modifiers = Modifiers()

  exceptType = QualifiedType(null) { exceptTypes = exceptTypes.append(exceptType); }
  [
    LOOKAHEAD("|")
    { lateRun(); }
    ( "|" exceptType = AnnotatedQualifiedType() { exceptTypes = exceptTypes.append(exceptType); } )+
    {
      exceptTypes = enRun(exceptTypes, Type.unionShape);
      exceptType = new UnionType(exceptTypes);
    }
  ]

  exceptId = VariableDeclaratorId()
  { return enRun(new FormalParameter(modifiers, exceptType, false, exceptId)); }
}

NodeList ResourceSpecification() :
{
	NodeList vars = new NodeList();
	VariableDeclarationExpr var;
}
{
  { run(); }
  "("
  // FIXME this is a bit more lenient than we need to be, eg allowing access modifiers like private
  var = VariableDeclExpression() { vars = vars.append(var); }
  ( LOOKAHEAD(2) ";" var = VariableDeclExpression() {vars = vars.append(var);} )*
  [ LOOKAHEAD(2) ";" ] // TODO Add syntactic data about semi-colon presence in NodeList
  ")"
  { return enRun(vars, VariableDeclarationExpr.resourcesShape); }
}


/* We use productions to match >>>, >> and > so that we can keep the
 * type Decl syntax with generics clean
 */

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                getToken(1).realKind == RUNSIGNEDSHIFT } )
   ">" ">" ">" { popNewWhitespaces(); }
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                getToken(1).realKind == RSIGNEDSHIFT } )
  ">" ">" { popNewWhitespaces(); }
  )
}


/**********************************************************************************************************************
 * Annotations
 **********************************************************************************************************************/

NodeList<AnnotationExpr> Annotations():
{
	NodeList<AnnotationExpr> annotations = new NodeList<AnnotationExpr>();
	AnnotationExpr annotation;
}
{
  { run(); }
  ( annotation = Annotation() { annotations = annotations.append(annotation); } )*
  { return enRun(annotations, AnnotationExpr.singleLineAnnotationsShape); }
}

AnnotationExpr Annotation():
{
	AnnotationExpr ret;
}
{
  (
    LOOKAHEAD( "@" QualifiedName() "(" ( Name() "=" | ")" ))
    ret = NormalAnnotation()
  |
    LOOKAHEAD( "@" QualifiedName() "(" )
    ret = SingleMemberAnnotation()
  |
    LOOKAHEAD( "@" QualifiedName() )
    ret = MarkerAnnotation()
  )
  { return ret; }
}

NormalAnnotationExpr NormalAnnotation():
{
	QualifiedName name;
	NodeList pairs = null;
}
{
  { run(); }
  "@" name = QualifiedName() "(" [ pairs = MemberValuePairs() ] ")"
  { return enRun(new NormalAnnotationExpr(name, ensureNotNull(pairs))); }
}

MarkerAnnotationExpr MarkerAnnotation():
{
	QualifiedName name;
}
{
  { run(); }
  "@" name = QualifiedName()
  { return enRun(new MarkerAnnotationExpr(name)); }
}

SingleMemberAnnotationExpr SingleMemberAnnotation():
{
	QualifiedName name;
	Expr memberVal;
}
{
  { run(); }
  "@" name = QualifiedName() "(" memberVal = MemberValue() ")"
  { return enRun(new SingleMemberAnnotationExpr(name, memberVal)); }
}

NodeList MemberValuePairs():
{
	NodeList ret = new NodeList();
	MemberValuePair pair;
}
{
  { run(); }
  pair = MemberValuePair() { ret = ret.append(pair); } ( "," pair = MemberValuePair() { ret = ret.append(pair); } )*
  { return enRun(ret); }
}

MemberValuePair MemberValuePair():
{
	Name name;
	Expr value;
}
{
  { run(); }
  name = Name() "=" value = MemberValue()
  { return enRun(new MemberValuePair(name, value)); }
}

Expr MemberValue():
{
	Expr ret;
}
{
  (
    ret = Annotation()
  |
    ret = MemberValueArrayInitializer()
  |
    ret = ConditionalExpression()
  )
  { return ret; }
}

Expr MemberValueArrayInitializer():
{
	NodeList ret = new NodeList();
	Expr member;
}
{
  { run(); }
  "{"
  [
    { run(); }
    member = MemberValue() { ret = ret.append(member); }
    ( LOOKAHEAD(2) "," member = MemberValue() { ret = ret.append(member); } )*
    { ret = enRun(ret, Expr.listShape); }
  ]
  [ "," ] // TODO Add syntactic data about comma presence in ArrayInitializerExpr
  "}"
  { return enRun(new ArrayInitializerExpr(ret)); }
}
