{
  kind: CompilationUnit,
  imports: [
    {
      kind: ImportDecl,
      isOnDemand: false,
      isStatic: false,
      name: com.github.javaparser.JavaParser,
    },
    {
      kind: ImportDecl,
      isOnDemand: false,
      isStatic: false,
      name: japa.parser.ParseException,
    },
    {
      kind: ImportDecl,
      isOnDemand: false,
      isStatic: false,
      name: com.github.javaparser.ast.CompilationUnit,
    },
    {
      kind: ImportDecl,
      isOnDemand: false,
      isStatic: false,
      name: org.junit.Ignore,
    },
    {
      kind: ImportDecl,
      isOnDemand: true,
      isStatic: false,
      name: java.io,
    },
    {
      kind: ImportDecl,
      isOnDemand: true,
      isStatic: false,
      name: java.util,
    },
  ],
  packageDecl: {
    kind: PackageDecl,
    annotations: [
    ],
    name: japa.bdd.samples,
  },
  types: [
    {
      kind: ClassDecl,
      extendsClause: {
        kind: QualifiedType,
        annotations: [
        ],
        name: Base,
        scope: null,
        typeArgs: null,
      },
      implementsClause: [
        {
          kind: QualifiedType,
          annotations: [
          ],
          name: Serializable,
          scope: null,
          typeArgs: null,
        },
      ],
      members: [
        {
          kind: FieldDecl,
          modifiers: [
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: Class,
            scope: null,
            typeArgs: null,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: clz1,
              },
              init: {
                kind: ClassExpr,
                type: {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: String,
                  scope: null,
                  typeArgs: null,
                },
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
            {
              kind: Modifier,
              keyword: Protected,
            },
          ],
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: Class,
            scope: null,
            typeArgs: null,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: clz2,
              },
              init: {
                kind: ParenthesizedExpr,
                inner: {
                  kind: ClassExpr,
                  type: {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: String,
                    scope: null,
                    typeArgs: null,
                  },
                },
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: Class,
            scope: null,
            typeArgs: null,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: clz3,
              },
              init: {
                kind: ClassExpr,
                type: {
                  kind: PrimitiveType,
                  annotations: [
                  ],
                  primitive: Int,
                },
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: Class,
            scope: null,
            typeArgs: null,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: clz4,
              },
              init: {
                kind: ParenthesizedExpr,
                inner: {
                  kind: ClassExpr,
                  type: {
                    kind: PrimitiveType,
                    annotations: [
                    ],
                    primitive: Int,
                  },
                },
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: ArrayType,
            componentType: {
              kind: PrimitiveType,
              annotations: [
              ],
              primitive: Int,
            },
            dims: [
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
            ],
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: arr,
              },
              init: {
                kind: ArrayCreationExpr,
                dimExprs: [
                  {
                    kind: ArrayDimExpr,
                    annotations: [
                    ],
                    expr: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 10,
                    },
                  },
                ],
                dims: [
                ],
                init: null,
                type: {
                  kind: PrimitiveType,
                  annotations: [
                  ],
                  primitive: Int,
                },
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Byte,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: bye,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Integer,
                literalString: 0,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Byte,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                  {
                    kind: ArrayDim,
                    annotations: [
                    ],
                  },
                ],
                name: byebye,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Void,
                literalString: null,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Short,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: sh1,
              },
              init: null,
            },
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: sh2,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Integer,
                literalString: 1,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Int,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: intWithUnderscore,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Integer,
                literalString: 1234_5678,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Long,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: longWithUnderscore,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Long,
                literalString: 1234_5678L,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Float,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: floatWithUnderscore,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Float,
                literalString: 1_234.5_678f,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Float,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: floatWithUnderscoreAndExponent,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Float,
                literalString: 1_234e1_0f,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Double,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: doubleWithUnderscore,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Double,
                literalString: 1_234.5_678,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Double,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: doubleWithUnderscoreAndExponent,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Double,
                literalString: 1_234e1_0,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Int,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: binaryLiteral,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Integer,
                literalString: 0b101101,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: ArrayType,
            componentType: {
              kind: QualifiedType,
              annotations: [
              ],
              name: List,
              scope: {
                kind: QualifiedType,
                annotations: [
                ],
                name: Toto,
                scope: null,
                typeArgs: [
                  {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: U,
                    scope: null,
                    typeArgs: null,
                  },
                ],
              },
              typeArgs: [
                {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: String,
                  scope: null,
                  typeArgs: null,
                },
              ],
            },
            dims: [
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
            ],
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: arrLS,
              },
              init: {
                kind: CastExpr,
                expr: {
                  kind: ArrayCreationExpr,
                  dimExprs: [
                    {
                      kind: ArrayDimExpr,
                      annotations: [
                      ],
                      expr: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 10,
                      },
                    },
                  ],
                  dims: [
                    {
                      kind: ArrayDim,
                      annotations: [
                      ],
                    },
                  ],
                  init: null,
                  type: {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: List,
                    scope: null,
                    typeArgs: [
                      {
                        kind: WildcardType,
                        annotations: [
                        ],
                        ext: null,
                        sup: null,
                      },
                    ],
                  },
                },
                type: {
                  kind: ArrayType,
                  componentType: {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: List,
                    scope: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: Toto,
                      scope: null,
                      typeArgs: [
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: U,
                          scope: null,
                          typeArgs: null,
                        },
                      ],
                    },
                    typeArgs: [
                      {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: String,
                        scope: null,
                        typeArgs: null,
                      },
                    ],
                  },
                  dims: [
                    {
                      kind: ArrayDim,
                      annotations: [
                      ],
                    },
                    {
                      kind: ArrayDim,
                      annotations: [
                      ],
                    },
                  ],
                },
              },
            },
          ],
        },
        {
          kind: EmptyMemberDecl,
        },
        {
          kind: InitializerDecl,
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: z,
                        },
                        init: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 0,
                        },
                      },
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: y,
                        },
                        init: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 0,
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: a,
                        },
                        init: {
                          kind: BinaryExpr,
                          left: {
                            kind: ParenthesizedExpr,
                            inner: {
                              kind: Name,
                              id: z,
                            },
                          },
                          op: Plus,
                          right: {
                            kind: Name,
                            id: y,
                          },
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: AssignExpr,
                  op: Normal,
                  target: {
                    kind: Name,
                    id: a,
                  },
                  value: {
                    kind: BinaryExpr,
                    left: {
                      kind: ParenthesizedExpr,
                      inner: {
                        kind: UnaryExpr,
                        expr: {
                          kind: Name,
                          id: z,
                        },
                        op: Positive,
                      },
                    },
                    op: Plus,
                    right: {
                      kind: Name,
                      id: y,
                    },
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Byte,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: b,
                        },
                        init: {
                          kind: CastExpr,
                          expr: {
                            kind: UnaryExpr,
                            expr: {
                              kind: Name,
                              id: y,
                            },
                            op: Positive,
                          },
                          type: {
                            kind: PrimitiveType,
                            annotations: [
                            ],
                            primitive: Byte,
                          },
                        },
                      },
                    ],
                  },
                },
              },
            ],
          },
          modifiers: [
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: List,
            scope: null,
            typeArgs: [
              {
                kind: QualifiedType,
                annotations: [
                ],
                name: String,
                scope: null,
                typeArgs: null,
              },
            ],
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: diamond1,
              },
              init: {
                kind: ObjectCreationExpr,
                args: [
                ],
                body: null,
                scope: null,
                type: {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: LinkedList,
                  scope: null,
                  typeArgs: [
                  ],
                },
                typeArgs: [
                ],
              },
            },
          ],
        },
        {
          kind: ClassDecl,
          extendsClause: null,
          implementsClause: [
          ],
          members: [
            {
              kind: FieldDecl,
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Static,
                },
              ],
              type: {
                kind: PrimitiveType,
                annotations: [
                ],
                primitive: Int,
              },
              variables: [
                {
                  kind: VariableDeclarator,
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: x,
                  },
                  init: {
                    kind: LiteralExpr,
                    literalClass: java.lang.Integer,
                    literalString: 0,
                  },
                },
              ],
            },
            {
              kind: MethodDecl,
              additionalAnnotations: [
              ],
              body: {
                kind: BlockStmt,
                stmts: [
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: UnaryExpr,
                        expr: {
                          kind: Name,
                          id: x,
                        },
                        op: Positive,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: UnaryExpr,
                        expr: {
                          kind: Name,
                          id: x,
                        },
                        op: Inverse,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: UnaryExpr,
                      expr: {
                        kind: Name,
                        id: x,
                      },
                      op: PreDecrement,
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: VariableDeclarationExpr,
                      declaration: {
                        kind: LocalVariableDecl,
                        modifiers: [
                        ],
                        type: {
                          kind: PrimitiveType,
                          annotations: [
                          ],
                          primitive: Boolean,
                        },
                        variables: [
                          {
                            kind: VariableDeclarator,
                            id: {
                              kind: VariableDeclaratorId,
                              dims: [
                              ],
                              name: b,
                            },
                            init: {
                              kind: UnaryExpr,
                              expr: {
                                kind: LiteralExpr,
                                literalClass: java.lang.Boolean,
                                literalString: false,
                              },
                              op: Not,
                            },
                          },
                        ],
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: And,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Or,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: XOr,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Minus,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Remainder,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Divide,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Times,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: LeftShift,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: RightSignedShift,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: RightUnsignedShift,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: b,
                        },
                        op: Or,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Boolean,
                          literalString: false,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: b,
                        },
                        op: BinOr,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Boolean,
                          literalString: false,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: b,
                        },
                        op: BinAnd,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Boolean,
                          literalString: false,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: b,
                        },
                        op: XOr,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Boolean,
                          literalString: false,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: b,
                        },
                        op: NotEqual,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Boolean,
                          literalString: false,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: Greater,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: Less,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: GreaterOrEqual,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: b,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: LessOrEqual,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: LeftShift,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: RightSignedShift,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: RightUnsignedShift,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: Minus,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: Times,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: Remainder,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: x,
                        },
                        op: Divide,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 1,
                        },
                      },
                    },
                  },
                ],
              },
              dims: [
              ],
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Public,
                },
                {
                  kind: Modifier,
                  keyword: Static,
                },
              ],
              name: main,
              params: [
                {
                  kind: FormalParameter,
                  ellipsisAnnotations: [
                  ],
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: args,
                  },
                  isReceiver: false,
                  isVarArgs: false,
                  modifiers: [
                  ],
                  receiverTypeName: null,
                  type: {
                    kind: ArrayType,
                    componentType: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: String,
                      scope: null,
                      typeArgs: null,
                    },
                    dims: [
                      {
                        kind: ArrayDim,
                        annotations: [
                        ],
                      },
                    ],
                  },
                },
              ],
              throwsClause: [
              ],
              type: {
                kind: VoidType,
              },
              typeParams: [
              ],
            },
          ],
          modifiers: [
            {
              kind: NormalAnnotationExpr,
              name: Deprecated,
              pairs: [
              ],
            },
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          name: Ugly,
          typeParams: [
          ],
        },
        {
          kind: EmptyMemberDecl,
        },
        {
          kind: FieldDecl,
          modifiers: [
            {
              kind: NormalAnnotationExpr,
              name: Deprecated,
              pairs: [
              ],
            },
          ],
          type: {
            kind: ArrayType,
            componentType: {
              kind: PrimitiveType,
              annotations: [
              ],
              primitive: Int,
            },
            dims: [
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
            ],
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: arr2,
              },
              init: {
                kind: ArrayCreationExpr,
                dimExprs: [
                  {
                    kind: ArrayDimExpr,
                    annotations: [
                    ],
                    expr: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 10,
                    },
                  },
                  {
                    kind: ArrayDimExpr,
                    annotations: [
                    ],
                    expr: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 2,
                    },
                  },
                  {
                    kind: ArrayDimExpr,
                    annotations: [
                    ],
                    expr: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 1,
                    },
                  },
                  {
                    kind: ArrayDimExpr,
                    annotations: [
                    ],
                    expr: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 0,
                    },
                  },
                ],
                dims: [
                ],
                init: null,
                type: {
                  kind: PrimitiveType,
                  annotations: [
                  ],
                  primitive: Int,
                },
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
            {
              kind: Modifier,
              keyword: Volatile,
            },
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Float,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: fff,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Float,
                literalString: 0x1.fffeP+127f,
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Char,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: cc,
              },
              init: {
                kind: LiteralExpr,
                literalClass: java.lang.Character,
                literalString: 'a',
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
          ],
          type: {
            kind: ArrayType,
            componentType: {
              kind: PrimitiveType,
              annotations: [
              ],
              primitive: Int,
            },
            dims: [
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
            ],
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: arr3,
              },
              init: {
                kind: ArrayInitializerExpr,
                trailingComma: false,
                values: [
                  {
                    kind: ArrayInitializerExpr,
                    trailingComma: false,
                    values: [
                      {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 1,
                      },
                      {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    ],
                  },
                  {
                    kind: ArrayInitializerExpr,
                    trailingComma: false,
                    values: [
                      {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 3,
                      },
                      {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 4,
                      },
                    ],
                  },
                ],
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          type: {
            kind: ArrayType,
            componentType: {
              kind: PrimitiveType,
              annotations: [
              ],
              primitive: Int,
            },
            dims: [
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
            ],
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                  {
                    kind: ArrayDim,
                    annotations: [
                    ],
                  },
                ],
                name: arr4,
              },
              init: {
                kind: ArrayInitializerExpr,
                trailingComma: false,
                values: [
                ],
              },
            },
          ],
        },
        {
          kind: FieldDecl,
          modifiers: [
            {
              kind: Modifier,
              keyword: Public,
            },
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: JavaConcepts,
            scope: null,
            typeArgs: null,
          },
          variables: [
            {
              kind: VariableDeclarator,
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: t,
              },
              init: null,
            },
          ],
        },
        {
          kind: InitializerDecl,
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ExpressionStmt,
                expr: {
                  kind: AssignExpr,
                  op: Normal,
                  target: {
                    kind: Name,
                    id: arr4,
                  },
                  value: {
                    kind: ArrayCreationExpr,
                    dimExprs: [
                    ],
                    dims: [
                      {
                        kind: ArrayDim,
                        annotations: [
                        ],
                      },
                      {
                        kind: ArrayDim,
                        annotations: [
                        ],
                      },
                    ],
                    init: {
                      kind: ArrayInitializerExpr,
                      trailingComma: false,
                      values: [
                        {
                          kind: ArrayInitializerExpr,
                          trailingComma: false,
                          values: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 2,
                            },
                          ],
                        },
                        {
                          kind: ArrayInitializerExpr,
                          trailingComma: false,
                          values: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 1,
                            },
                          ],
                        },
                      ],
                    },
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                  },
                },
              },
            ],
          },
          modifiers: [
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
        },
        {
          kind: InitializerDecl,
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ExpressionStmt,
                expr: {
                  kind: AssignExpr,
                  op: Normal,
                  target: {
                    kind: Name,
                    id: arr3,
                  },
                  value: {
                    kind: ArrayCreationExpr,
                    dimExprs: [
                    ],
                    dims: [
                      {
                        kind: ArrayDim,
                        annotations: [
                        ],
                      },
                      {
                        kind: ArrayDim,
                        annotations: [
                        ],
                      },
                    ],
                    init: {
                      kind: ArrayInitializerExpr,
                      trailingComma: false,
                      values: [
                        {
                          kind: ArrayInitializerExpr,
                          trailingComma: false,
                          values: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 2,
                            },
                          ],
                        },
                        {
                          kind: ArrayInitializerExpr,
                          trailingComma: false,
                          values: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 1,
                            },
                          ],
                        },
                      ],
                    },
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                  },
                },
              },
            ],
          },
          modifiers: [
          ],
        },
        {
          kind: EnumDecl,
          enumConstants: [
            {
              kind: EnumConstantDecl,
              args: null,
              classBody: null,
              modifiers: [
              ],
              name: asc,
            },
            {
              kind: EnumConstantDecl,
              args: null,
              classBody: null,
              modifiers: [
              ],
              name: def,
            },
          ],
          implementsClause: [
          ],
          members: [
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: Public,
            },
          ],
          name: Teste,
          trailingComma: false,
        },
        {
          kind: EnumDecl,
          enumConstants: [
            {
              kind: EnumConstantDecl,
              args: null,
              classBody: null,
              modifiers: [
              ],
              name: m,
            },
            {
              kind: EnumConstantDecl,
              args: null,
              classBody: null,
              modifiers: [
                {
                  kind: MarkerAnnotationExpr,
                  name: Deprecated,
                },
              ],
              name: f,
            },
          ],
          implementsClause: [
          ],
          members: [
            {
              kind: EnumDecl,
              enumConstants: [
              ],
              implementsClause: [
                {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: Serializable,
                  scope: null,
                  typeArgs: null,
                },
                {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: Cloneable,
                  scope: null,
                  typeArgs: null,
                },
              ],
              members: [
              ],
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Public,
                },
                {
                  kind: Modifier,
                  keyword: Static,
                },
              ],
              name: Sexo_,
              trailingComma: false,
            },
            {
              kind: ConstructorDecl,
              body: {
                kind: BlockStmt,
                stmts: [
                ],
              },
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Private,
                },
              ],
              name: Sexo,
              params: [
              ],
              throwsClause: [
              ],
              typeParams: [
              ],
            },
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: Public,
            },
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          name: Sexo,
          trailingComma: false,
        },
        {
          kind: EnumDecl,
          enumConstants: [
            {
              kind: EnumConstantDecl,
              args: [
                {
                  kind: LiteralExpr,
                  literalClass: java.lang.Integer,
                  literalString: 1,
                },
              ],
              classBody: [
                {
                  kind: MethodDecl,
                  additionalAnnotations: [
                  ],
                  body: {
                    kind: BlockStmt,
                    stmts: [
                    ],
                  },
                  dims: [
                  ],
                  modifiers: [
                    {
                      kind: MarkerAnnotationExpr,
                      name: Override,
                    },
                  ],
                  name: mm,
                  params: [
                  ],
                  throwsClause: [
                  ],
                  type: {
                    kind: VoidType,
                  },
                  typeParams: [
                  ],
                },
              ],
              modifiers: [
              ],
              name: m,
            },
            {
              kind: EnumConstantDecl,
              args: [
                {
                  kind: LiteralExpr,
                  literalClass: java.lang.Integer,
                  literalString: 2,
                },
              ],
              classBody: [
                {
                  kind: MethodDecl,
                  additionalAnnotations: [
                  ],
                  body: {
                    kind: BlockStmt,
                    stmts: [
                    ],
                  },
                  dims: [
                  ],
                  modifiers: [
                  ],
                  name: mm,
                  params: [
                  ],
                  throwsClause: [
                  ],
                  type: {
                    kind: VoidType,
                  },
                  typeParams: [
                  ],
                },
              ],
              modifiers: [
              ],
              name: f,
            },
          ],
          implementsClause: [
          ],
          members: [
            {
              kind: MethodDecl,
              additionalAnnotations: [
              ],
              body: null,
              dims: [
              ],
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Native,
                },
              ],
              name: nnn,
              params: [
              ],
              throwsClause: [
              ],
              type: {
                kind: VoidType,
              },
              typeParams: [
              ],
            },
            {
              kind: FieldDecl,
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Transient,
                },
              ],
              type: {
                kind: PrimitiveType,
                annotations: [
                ],
                primitive: Int,
              },
              variables: [
                {
                  kind: VariableDeclarator,
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: x,
                  },
                  init: null,
                },
              ],
            },
            {
              kind: ConstructorDecl,
              body: {
                kind: BlockStmt,
                stmts: [
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: FieldAccessExpr,
                        name: x,
                        scope: {
                          kind: ThisExpr,
                          classExpr: null,
                        },
                      },
                      value: {
                        kind: Name,
                        id: x,
                      },
                    },
                  },
                ],
              },
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Private,
                },
              ],
              name: Enum,
              params: [
                {
                  kind: FormalParameter,
                  ellipsisAnnotations: [
                  ],
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: x,
                  },
                  isReceiver: false,
                  isVarArgs: false,
                  modifiers: [
                  ],
                  receiverTypeName: null,
                  type: {
                    kind: PrimitiveType,
                    annotations: [
                    ],
                    primitive: Int,
                  },
                },
              ],
              throwsClause: [
              ],
              typeParams: [
              ],
            },
            {
              kind: MethodDecl,
              additionalAnnotations: [
              ],
              body: null,
              dims: [
              ],
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Abstract,
                },
              ],
              name: mm,
              params: [
              ],
              throwsClause: [
              ],
              type: {
                kind: VoidType,
              },
              typeParams: [
              ],
            },
          ],
          modifiers: [
            {
              kind: MarkerAnnotationExpr,
              name: Deprecated,
            },
            {
              kind: Modifier,
              keyword: Public,
            },
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          name: Enum,
          trailingComma: false,
        },
        {
          kind: MethodDecl,
          additionalAnnotations: [
          ],
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ReturnStmt,
                expr: {
                  kind: LiteralExpr,
                  literalClass: java.lang.Double,
                  literalString: 0.0,
                },
              },
            ],
          },
          dims: [
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: StrictFP,
            },
          ],
          name: ddd,
          params: [
          ],
          throwsClause: [
          ],
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Double,
          },
          typeParams: [
          ],
        },
        {
          kind: ConstructorDecl,
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ExpressionStmt,
                expr: {
                  kind: AssignExpr,
                  op: Normal,
                  target: {
                    kind: ArrayAccessExpr,
                    index: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 0,
                    },
                    name: {
                      kind: FieldAccessExpr,
                      name: arr,
                      scope: {
                        kind: ThisExpr,
                        classExpr: null,
                      },
                    },
                  },
                  value: {
                    kind: Name,
                    id: x,
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: T,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: val1,
                        },
                        init: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Void,
                          literalString: null,
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: E,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: val2,
                        },
                        init: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Void,
                          literalString: null,
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: MethodInvocationExpr,
                  args: [
                    val1,
                    val2,
                  ],
                  name: check2,
                  scope: {
                    kind: SuperExpr,
                    classExpr: null,
                  },
                  typeArgs: [
                    {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: T,
                      scope: null,
                      typeArgs: null,
                    },
                    {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: E,
                      scope: null,
                      typeArgs: null,
                    },
                  ],
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Boolean,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: b,
                        },
                        init: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Boolean,
                          literalString: true,
                        },
                      },
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: y,
                        },
                        init: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Boolean,
                          literalString: false,
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: TypeDeclarationStmt,
                typeDecl: {
                  kind: ClassDecl,
                  extendsClause: null,
                  implementsClause: [
                  ],
                  members: [
                    {
                      kind: FieldDecl,
                      modifiers: [
                      ],
                      type: {
                        kind: PrimitiveType,
                        annotations: [
                        ],
                        primitive: Int,
                      },
                      variables: [
                        {
                          kind: VariableDeclarator,
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: i,
                          },
                          init: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 0,
                          },
                        },
                      ],
                    },
                    {
                      kind: ConstructorDecl,
                      body: {
                        kind: BlockStmt,
                        stmts: [
                        ],
                      },
                      modifiers: [
                        {
                          kind: Modifier,
                          keyword: Public,
                        },
                      ],
                      name: X,
                      params: [
                      ],
                      throwsClause: [
                      ],
                      typeParams: [
                        {
                          kind: TypeParameter,
                          annotations: [
                          ],
                          bounds: [
                          ],
                          name: D,
                        },
                      ],
                    },
                    {
                      kind: MethodDecl,
                      additionalAnnotations: [
                      ],
                      body: {
                        kind: BlockStmt,
                        stmts: [
                        ],
                      },
                      dims: [
                      ],
                      modifiers: [
                        {
                          kind: Modifier,
                          keyword: Public,
                        },
                      ],
                      name: m,
                      params: [
                      ],
                      throwsClause: [
                      ],
                      type: {
                        kind: VoidType,
                      },
                      typeParams: [
                      ],
                    },
                  ],
                  modifiers: [
                    {
                      kind: Modifier,
                      keyword: Abstract,
                    },
                  ],
                  name: X,
                  typeParams: [
                  ],
                },
              },
              {
                kind: TypeDeclarationStmt,
                typeDecl: {
                  kind: ClassDecl,
                  extendsClause: {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: X,
                    scope: null,
                    typeArgs: null,
                  },
                  implementsClause: [
                  ],
                  members: [
                    {
                      kind: ConstructorDecl,
                      body: {
                        kind: BlockStmt,
                        stmts: [
                          {
                            kind: ExplicitConstructorInvocationStmt,
                            args: [
                            ],
                            expr: null,
                            isThis: false,
                            typeArgs: [
                            ],
                          },
                          {
                            kind: ExpressionStmt,
                            expr: {
                              kind: AssignExpr,
                              op: Normal,
                              target: {
                                kind: FieldAccessExpr,
                                name: cc,
                                scope: {
                                  kind: ThisExpr,
                                  classExpr: JavaConcepts,
                                },
                              },
                              value: {
                                kind: LiteralExpr,
                                literalClass: java.lang.Character,
                                literalString: 'c',
                              },
                            },
                          },
                          {
                            kind: ExpressionStmt,
                            expr: {
                              kind: AssignExpr,
                              op: Normal,
                              target: {
                                kind: FieldAccessExpr,
                                name: i,
                                scope: {
                                  kind: SuperExpr,
                                  classExpr: null,
                                },
                              },
                              value: {
                                kind: LiteralExpr,
                                literalClass: java.lang.Integer,
                                literalString: 1,
                              },
                            },
                          },
                          {
                            kind: ExpressionStmt,
                            expr: {
                              kind: MethodInvocationExpr,
                              args: [
                              ],
                              name: m,
                              scope: {
                                kind: SuperExpr,
                                classExpr: Y,
                              },
                              typeArgs: [
                              ],
                            },
                          },
                        ],
                      },
                      modifiers: [
                        {
                          kind: Modifier,
                          keyword: Public,
                        },
                      ],
                      name: Y,
                      params: [
                      ],
                      throwsClause: [
                      ],
                      typeParams: [
                      ],
                    },
                    {
                      kind: ConstructorDecl,
                      body: {
                        kind: BlockStmt,
                        stmts: [
                          {
                            kind: ExplicitConstructorInvocationStmt,
                            args: [
                            ],
                            expr: null,
                            isThis: false,
                            typeArgs: [
                            ],
                          },
                        ],
                      },
                      modifiers: [
                        {
                          kind: Modifier,
                          keyword: Public,
                        },
                      ],
                      name: Y,
                      params: [
                        {
                          kind: FormalParameter,
                          ellipsisAnnotations: [
                          ],
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: y,
                          },
                          isReceiver: false,
                          isVarArgs: false,
                          modifiers: [
                          ],
                          receiverTypeName: null,
                          type: {
                            kind: PrimitiveType,
                            annotations: [
                            ],
                            primitive: Int,
                          },
                        },
                      ],
                      throwsClause: [
                      ],
                      typeParams: [
                      ],
                    },
                    {
                      kind: ConstructorDecl,
                      body: {
                        kind: BlockStmt,
                        stmts: [
                          {
                            kind: ExplicitConstructorInvocationStmt,
                            args: [
                            ],
                            expr: null,
                            isThis: true,
                            typeArgs: [
                            ],
                          },
                        ],
                      },
                      modifiers: [
                        {
                          kind: Modifier,
                          keyword: Public,
                        },
                      ],
                      name: Y,
                      params: [
                        {
                          kind: FormalParameter,
                          ellipsisAnnotations: [
                          ],
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: x,
                          },
                          isReceiver: false,
                          isVarArgs: false,
                          modifiers: [
                          ],
                          receiverTypeName: null,
                          type: {
                            kind: PrimitiveType,
                            annotations: [
                            ],
                            primitive: Long,
                          },
                        },
                      ],
                      throwsClause: [
                      ],
                      typeParams: [
                      ],
                    },
                  ],
                  modifiers: [
                    {
                      kind: MarkerAnnotationExpr,
                      name: Deprecated,
                    },
                    {
                      kind: Modifier,
                      keyword: Final,
                    },
                  ],
                  name: Y,
                  typeParams: [
                  ],
                },
              },
            ],
          },
          modifiers: [
            {
              kind: Modifier,
              keyword: Public,
            },
          ],
          name: JavaConcepts,
          params: [
            {
              kind: FormalParameter,
              ellipsisAnnotations: [
              ],
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: x,
              },
              isReceiver: false,
              isVarArgs: false,
              modifiers: [
              ],
              receiverTypeName: null,
              type: {
                kind: PrimitiveType,
                annotations: [
                ],
                primitive: Int,
              },
            },
          ],
          throwsClause: [
          ],
          typeParams: [
            {
              kind: TypeParameter,
              annotations: [
              ],
              bounds: [
              ],
              name: T,
            },
            {
              kind: TypeParameter,
              annotations: [
              ],
              bounds: [
              ],
              name: E,
            },
          ],
        },
        {
          kind: ConstructorDecl,
          body: {
            kind: BlockStmt,
            stmts: [
            ],
          },
          modifiers: [
            {
              kind: Modifier,
              keyword: Public,
            },
          ],
          name: JavaConcepts,
          params: [
            {
              kind: FormalParameter,
              ellipsisAnnotations: [
              ],
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: str,
              },
              isReceiver: false,
              isVarArgs: false,
              modifiers: [
              ],
              receiverTypeName: null,
              type: {
                kind: QualifiedType,
                annotations: [
                ],
                name: String,
                scope: null,
                typeArgs: null,
              },
            },
          ],
          throwsClause: [
          ],
          typeParams: [
            {
              kind: TypeParameter,
              annotations: [
              ],
              bounds: [
              ],
              name: T,
            },
          ],
        },
        {
          kind: ClassDecl,
          extendsClause: {
            kind: QualifiedType,
            annotations: [
            ],
            name: JavaConcepts,
            scope: null,
            typeArgs: [
              {
                kind: QualifiedType,
                annotations: [
                ],
                name: List,
                scope: null,
                typeArgs: [
                  {
                    kind: ArrayType,
                    componentType: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                    dims: [
                      {
                        kind: ArrayDim,
                        annotations: [
                        ],
                      },
                    ],
                  },
                ],
              },
              {
                kind: QualifiedType,
                annotations: [
                ],
                name: String,
                scope: null,
                typeArgs: null,
              },
            ],
          },
          implementsClause: [
          ],
          members: [
            {
              kind: FieldDecl,
              modifiers: [
                {
                  kind: MarkerAnnotationExpr,
                  name: Deprecated,
                },
                {
                  kind: Modifier,
                  keyword: Final,
                },
              ],
              type: {
                kind: PrimitiveType,
                annotations: [
                ],
                primitive: Int,
              },
              variables: [
                {
                  kind: VariableDeclarator,
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: z,
                  },
                  init: {
                    kind: LiteralExpr,
                    literalClass: java.lang.Integer,
                    literalString: 0,
                  },
                },
              ],
            },
            {
              kind: FieldDecl,
              modifiers: [
              ],
              type: {
                kind: PrimitiveType,
                annotations: [
                ],
                primitive: Int,
              },
              variables: [
                {
                  kind: VariableDeclarator,
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: i,
                  },
                  init: {
                    kind: CastExpr,
                    expr: {
                      kind: UnaryExpr,
                      expr: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 1,
                      },
                      op: Negative,
                    },
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                  },
                },
              ],
            },
            {
              kind: ConstructorDecl,
              body: {
                kind: BlockStmt,
                stmts: [
                  {
                    kind: ExplicitConstructorInvocationStmt,
                    args: [
                      {
                        kind: ArrayAccessExpr,
                        index: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 0,
                        },
                        name: {
                          kind: Name,
                          id: x,
                        },
                      },
                    ],
                    expr: null,
                    isThis: false,
                    typeArgs: [
                      {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: String,
                        scope: null,
                        typeArgs: null,
                      },
                    ],
                  },
                ],
              },
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Public,
                },
              ],
              name: QWE,
              params: [
                {
                  kind: FormalParameter,
                  ellipsisAnnotations: [
                  ],
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: x,
                  },
                  isReceiver: false,
                  isVarArgs: true,
                  modifiers: [
                  ],
                  receiverTypeName: null,
                  type: {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: String,
                    scope: null,
                    typeArgs: null,
                  },
                },
              ],
              throwsClause: [
              ],
              typeParams: [
              ],
            },
            {
              kind: ConstructorDecl,
              body: {
                kind: BlockStmt,
                stmts: [
                  {
                    kind: ExplicitConstructorInvocationStmt,
                    args: [
                      {
                        kind: ArrayAccessExpr,
                        index: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 0,
                        },
                        name: {
                          kind: Name,
                          id: x,
                        },
                      },
                    ],
                    expr: null,
                    isThis: false,
                    typeArgs: [
                    ],
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: i,
                      },
                      value: {
                        kind: ArrayAccessExpr,
                        index: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 0,
                        },
                        name: {
                          kind: Name,
                          id: x,
                        },
                      },
                    },
                  },
                  {
                    kind: AssertStmt,
                    check: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Boolean,
                      literalString: true,
                    },
                    msg: null,
                  },
                  {
                    kind: AssertStmt,
                    check: {
                      kind: BinaryExpr,
                      left: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 1,
                      },
                      op: Equal,
                      right: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 1,
                      },
                    },
                    msg: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 2,
                    },
                  },
                  {
                    kind: BlockStmt,
                    stmts: [
                      {
                        kind: ExpressionStmt,
                        expr: {
                          kind: VariableDeclarationExpr,
                          declaration: {
                            kind: LocalVariableDecl,
                            modifiers: [
                            ],
                            type: {
                              kind: PrimitiveType,
                              annotations: [
                              ],
                              primitive: Int,
                            },
                            variables: [
                              {
                                kind: VariableDeclarator,
                                id: {
                                  kind: VariableDeclaratorId,
                                  dims: [
                                  ],
                                  name: iii,
                                },
                                init: {
                                  kind: LiteralExpr,
                                  literalClass: java.lang.Integer,
                                  literalString: 3,
                                },
                              },
                            ],
                          },
                        },
                      },
                      {
                        kind: ExpressionStmt,
                        expr: {
                          kind: AssignExpr,
                          op: Plus,
                          target: {
                            kind: Name,
                            id: iii,
                          },
                          value: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 3,
                          },
                        },
                      },
                    ],
                  },
                  {
                    kind: LabeledStmt,
                    label: label,
                    stmt: {
                      kind: BlockStmt,
                      stmts: [
                        {
                          kind: ExpressionStmt,
                          expr: {
                            kind: VariableDeclarationExpr,
                            declaration: {
                              kind: LocalVariableDecl,
                              modifiers: [
                              ],
                              type: {
                                kind: PrimitiveType,
                                annotations: [
                                ],
                                primitive: Int,
                              },
                              variables: [
                                {
                                  kind: VariableDeclarator,
                                  id: {
                                    kind: VariableDeclaratorId,
                                    dims: [
                                    ],
                                    name: iii,
                                  },
                                  init: {
                                    kind: LiteralExpr,
                                    literalClass: java.lang.Integer,
                                    literalString: 1,
                                  },
                                },
                              ],
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: EmptyStmt,
                  },
                  {
                    kind: EmptyStmt,
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: VariableDeclarationExpr,
                      declaration: {
                        kind: LocalVariableDecl,
                        modifiers: [
                        ],
                        type: {
                          kind: PrimitiveType,
                          annotations: [
                          ],
                          primitive: Int,
                        },
                        variables: [
                          {
                            kind: VariableDeclarator,
                            id: {
                              kind: VariableDeclaratorId,
                              dims: [
                              ],
                              name: min,
                            },
                            init: {
                              kind: UnaryExpr,
                              expr: {
                                kind: LiteralExpr,
                                literalClass: java.lang.Integer,
                                literalString: 2147483648,
                              },
                              op: Negative,
                            },
                          },
                        ],
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: VariableDeclarationExpr,
                      declaration: {
                        kind: LocalVariableDecl,
                        modifiers: [
                        ],
                        type: {
                          kind: PrimitiveType,
                          annotations: [
                          ],
                          primitive: Long,
                        },
                        variables: [
                          {
                            kind: VariableDeclarator,
                            id: {
                              kind: VariableDeclaratorId,
                              dims: [
                              ],
                              name: sl,
                            },
                            init: {
                              kind: LiteralExpr,
                              literalClass: java.lang.Long,
                              literalString: 123123123123l,
                            },
                          },
                        ],
                      },
                    },
                  },
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: VariableDeclarationExpr,
                      declaration: {
                        kind: LocalVariableDecl,
                        modifiers: [
                        ],
                        type: {
                          kind: PrimitiveType,
                          annotations: [
                          ],
                          primitive: Long,
                        },
                        variables: [
                          {
                            kind: VariableDeclarator,
                            id: {
                              kind: VariableDeclaratorId,
                              dims: [
                              ],
                              name: minl,
                            },
                            init: {
                              kind: UnaryExpr,
                              expr: {
                                kind: LiteralExpr,
                                literalClass: java.lang.Long,
                                literalString: 9223372036854775808L,
                              },
                              op: Negative,
                            },
                          },
                        ],
                      },
                    },
                  },
                  {
                    kind: SwitchStmt,
                    cases: [
                    ],
                    selector: {
                      kind: Name,
                      id: i,
                    },
                  },
                  {
                    kind: LabeledStmt,
                    label: ll,
                    stmt: {
                      kind: SwitchStmt,
                      cases: [
                        {
                          kind: SwitchCase,
                          label: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 1,
                          },
                          stmts: [
                            {
                              kind: ExpressionStmt,
                              expr: {
                                kind: MethodInvocationExpr,
                                args: [
                                  {
                                    kind: LiteralExpr,
                                    literalClass: java.lang.Integer,
                                    literalString: 1,
                                  },
                                ],
                                name: println,
                                scope: {
                                  kind: FieldAccessExpr,
                                  name: out,
                                  scope: System,
                                },
                                typeArgs: [
                                ],
                              },
                            },
                            {
                              kind: BreakStmt,
                              id: ll,
                            },
                          ],
                        },
                        {
                          kind: SwitchCase,
                          label: null,
                          stmts: [
                            {
                              kind: BlockStmt,
                              stmts: [
                                {
                                  kind: ExpressionStmt,
                                  expr: {
                                    kind: MethodInvocationExpr,
                                    args: [
                                      {
                                        kind: LiteralExpr,
                                        literalClass: java.lang.String,
                                        literalString: "default",
                                      },
                                    ],
                                    name: println,
                                    scope: {
                                      kind: FieldAccessExpr,
                                      name: out,
                                      scope: System,
                                    },
                                    typeArgs: [
                                    ],
                                  },
                                },
                                {
                                  kind: BreakStmt,
                                  id: null,
                                },
                              ],
                            },
                          ],
                        },
                        {
                          kind: SwitchCase,
                          label: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 2,
                          },
                          stmts: [
                            {
                              kind: IfStmt,
                              condition: {
                                kind: InstanceOfExpr,
                                expr: {
                                  kind: Name,
                                  id: t,
                                },
                                type: {
                                  kind: QualifiedType,
                                  annotations: [
                                  ],
                                  name: Base,
                                  scope: null,
                                  typeArgs: null,
                                },
                              },
                              elseStmt: null,
                              thenStmt: {
                                kind: BlockStmt,
                                stmts: [
                                  {
                                    kind: ExpressionStmt,
                                    expr: {
                                      kind: MethodInvocationExpr,
                                      args: [
                                        {
                                          kind: LiteralExpr,
                                          literalClass: java.lang.Integer,
                                          literalString: 1,
                                        },
                                      ],
                                      name: println,
                                      scope: {
                                        kind: FieldAccessExpr,
                                        name: out,
                                        scope: System,
                                      },
                                      typeArgs: [
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: ExpressionStmt,
                              expr: {
                                kind: UnaryExpr,
                                expr: {
                                  kind: Name,
                                  id: i,
                                },
                                op: PostIncrement,
                              },
                            },
                            {
                              kind: ExpressionStmt,
                              expr: {
                                kind: UnaryExpr,
                                expr: {
                                  kind: Name,
                                  id: i,
                                },
                                op: PreIncrement,
                              },
                            },
                          ],
                        },
                      ],
                      selector: {
                        kind: Name,
                        id: i,
                      },
                    },
                  },
                ],
              },
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Public,
                },
              ],
              name: QWE,
              params: [
                {
                  kind: FormalParameter,
                  ellipsisAnnotations: [
                  ],
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: x,
                  },
                  isReceiver: false,
                  isVarArgs: true,
                  modifiers: [
                  ],
                  receiverTypeName: null,
                  type: {
                    kind: PrimitiveType,
                    annotations: [
                    ],
                    primitive: Int,
                  },
                },
              ],
              throwsClause: [
              ],
              typeParams: [
              ],
            },
            {
              kind: MethodDecl,
              additionalAnnotations: [
              ],
              body: {
                kind: BlockStmt,
                stmts: [
                  {
                    kind: ExpressionStmt,
                    expr: {
                      kind: VariableDeclarationExpr,
                      declaration: {
                        kind: LocalVariableDecl,
                        modifiers: [
                        ],
                        type: {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: List,
                          scope: null,
                          typeArgs: [
                            {
                              kind: WildcardType,
                              annotations: [
                              ],
                              ext: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: Number,
                                scope: null,
                                typeArgs: null,
                              },
                              sup: null,
                            },
                          ],
                        },
                        variables: [
                          {
                            kind: VariableDeclarator,
                            id: {
                              kind: VariableDeclaratorId,
                              dims: [
                              ],
                              name: x,
                            },
                            init: {
                              kind: ObjectCreationExpr,
                              args: [
                              ],
                              body: null,
                              scope: null,
                              type: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: ArrayList,
                                scope: null,
                                typeArgs: [
                                  {
                                    kind: QualifiedType,
                                    annotations: [
                                    ],
                                    name: Integer,
                                    scope: null,
                                    typeArgs: null,
                                  },
                                ],
                              },
                              typeArgs: [
                              ],
                            },
                          },
                        ],
                      },
                    },
                  },
                  {
                    kind: ReturnStmt,
                    expr: {
                      kind: ArrayCreationExpr,
                      dimExprs: [
                      ],
                      dims: [
                        {
                          kind: ArrayDim,
                          annotations: [
                          ],
                        },
                      ],
                      init: {
                        kind: ArrayInitializerExpr,
                        trailingComma: false,
                        values: [
                          {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 1,
                          },
                        ],
                      },
                      type: {
                        kind: PrimitiveType,
                        annotations: [
                        ],
                        primitive: Int,
                      },
                    },
                  },
                ],
              },
              dims: [
                {
                  kind: ArrayDim,
                  annotations: [
                  ],
                },
              ],
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Private,
                },
                {
                  kind: Modifier,
                  keyword: Synchronized,
                },
              ],
              name: doSomething,
              params: [
              ],
              throwsClause: [
              ],
              type: {
                kind: PrimitiveType,
                annotations: [
                ],
                primitive: Int,
              },
              typeParams: [
              ],
            },
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: Private,
            },
          ],
          name: QWE,
          typeParams: [
          ],
        },
        {
          kind: MethodDecl,
          additionalAnnotations: [
          ],
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: x,
                        },
                        init: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 2,
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: CompilationUnit,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: cu,
                        },
                        init: {
                          kind: MethodInvocationExpr,
                          args: [
                            {
                              kind: ObjectCreationExpr,
                              args: [
                                {
                                  kind: LiteralExpr,
                                  literalClass: java.lang.String,
                                  literalString: "src/japa/parser/javacc/Parser.java",
                                },
                              ],
                              body: null,
                              scope: null,
                              type: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: File,
                                scope: null,
                                typeArgs: null,
                              },
                              typeArgs: [
                              ],
                            },
                          ],
                          name: parse,
                          scope: null,
                          typeArgs: [
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: MethodInvocationExpr,
                  args: [
                    cu,
                  ],
                  name: println,
                  scope: {
                    kind: FieldAccessExpr,
                    name: out,
                    scope: System,
                  },
                  typeArgs: [
                  ],
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: JavaConcepts,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: teste,
                        },
                        init: {
                          kind: ObjectCreationExpr,
                          args: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 2,
                            },
                          ],
                          body: null,
                          scope: null,
                          type: {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: JavaConcepts,
                            scope: null,
                            typeArgs: null,
                          },
                          typeArgs: [
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: QWE,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: qwe,
                        },
                        init: {
                          kind: ObjectCreationExpr,
                          args: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 1,
                            },
                          ],
                          body: null,
                          scope: teste,
                          type: {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: QWE,
                            scope: null,
                            typeArgs: null,
                          },
                          typeArgs: [
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: IfStmt,
                condition: {
                  kind: BinaryExpr,
                  left: {
                    kind: BinaryExpr,
                    left: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 1,
                    },
                    op: Plus,
                    right: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 1,
                    },
                  },
                  op: Equal,
                  right: {
                    kind: LiteralExpr,
                    literalClass: java.lang.Integer,
                    literalString: 2,
                  },
                },
                elseStmt: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: AssignExpr,
                        op: Normal,
                        target: {
                          kind: Name,
                          id: x,
                        },
                        value: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Integer,
                          literalString: 3,
                        },
                      },
                    },
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: AssignExpr,
                        op: Normal,
                        target: {
                          kind: Name,
                          id: teste,
                        },
                        value: {
                          kind: ObjectCreationExpr,
                          args: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 1,
                            },
                          ],
                          body: null,
                          scope: null,
                          type: {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: JavaConcepts,
                            scope: null,
                            typeArgs: null,
                          },
                          typeArgs: [
                          ],
                        },
                      },
                    },
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: AssignExpr,
                        op: Normal,
                        target: {
                          kind: Name,
                          id: x,
                        },
                        value: {
                          kind: ConditionalExpr,
                          condition: {
                            kind: BinaryExpr,
                            left: {
                              kind: Name,
                              id: x,
                            },
                            op: Equal,
                            right: {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 0,
                            },
                          },
                          elseExpr: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 4,
                          },
                          thenExpr: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 2,
                          },
                        },
                      },
                    },
                  ],
                },
                thenStmt: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: AssignExpr,
                        op: Normal,
                        target: {
                          kind: Name,
                          id: teste,
                        },
                        value: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Void,
                          literalString: null,
                        },
                      },
                    },
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: AssignExpr,
                        op: Normal,
                        target: {
                          kind: Name,
                          id: teste,
                        },
                        value: {
                          kind: ObjectCreationExpr,
                          args: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.Integer,
                              literalString: 1,
                            },
                          ],
                          body: null,
                          scope: null,
                          type: {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: JavaConcepts,
                            scope: null,
                            typeArgs: null,
                          },
                          typeArgs: [
                          ],
                        },
                      },
                    },
                  ],
                },
              },
              {
                kind: IfStmt,
                condition: {
                  kind: LiteralExpr,
                  literalClass: java.lang.Boolean,
                  literalString: true,
                },
                elseStmt: {
                  kind: ExpressionStmt,
                  expr: {
                    kind: AssignExpr,
                    op: Normal,
                    target: {
                      kind: Name,
                      id: x,
                    },
                    value: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 3,
                    },
                  },
                },
                thenStmt: {
                  kind: ExpressionStmt,
                  expr: {
                    kind: AssignExpr,
                    op: Normal,
                    target: {
                      kind: Name,
                      id: x,
                    },
                    value: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 1,
                    },
                  },
                },
              },
              {
                kind: IfStmt,
                condition: {
                  kind: LiteralExpr,
                  literalClass: java.lang.Boolean,
                  literalString: true,
                },
                elseStmt: {
                  kind: IfStmt,
                  condition: {
                    kind: LiteralExpr,
                    literalClass: java.lang.Boolean,
                    literalString: false,
                  },
                  elseStmt: {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 2,
                      },
                    },
                  },
                  thenStmt: {
                    kind: ExpressionStmt,
                    expr: {
                      kind: AssignExpr,
                      op: Normal,
                      target: {
                        kind: Name,
                        id: x,
                      },
                      value: {
                        kind: LiteralExpr,
                        literalClass: java.lang.Integer,
                        literalString: 3,
                      },
                    },
                  },
                },
                thenStmt: {
                  kind: ExpressionStmt,
                  expr: {
                    kind: AssignExpr,
                    op: Normal,
                    target: {
                      kind: Name,
                      id: x,
                    },
                    value: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 1,
                    },
                  },
                },
              },
              {
                kind: WhileStmt,
                body: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: LabeledStmt,
                      label: xxx,
                      stmt: {
                        kind: WhileStmt,
                        body: {
                          kind: ContinueStmt,
                          id: xxx,
                        },
                        condition: {
                          kind: BinaryExpr,
                          left: {
                            kind: Name,
                            id: x,
                          },
                          op: Equal,
                          right: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 3,
                          },
                        },
                      },
                    },
                    {
                      kind: BreakStmt,
                      id: null,
                    },
                  ],
                },
                condition: {
                  kind: LiteralExpr,
                  literalClass: java.lang.Boolean,
                  literalString: true,
                },
              },
              {
                kind: DoStmt,
                body: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: UnaryExpr,
                        expr: {
                          kind: Name,
                          id: x,
                        },
                        op: PostIncrement,
                      },
                    },
                  ],
                },
                condition: {
                  kind: BinaryExpr,
                  left: {
                    kind: Name,
                    id: x,
                  },
                  op: Less,
                  right: {
                    kind: LiteralExpr,
                    literalClass: java.lang.Integer,
                    literalString: 100,
                  },
                },
              },
              {
                kind: DoStmt,
                body: {
                  kind: ExpressionStmt,
                  expr: {
                    kind: UnaryExpr,
                    expr: {
                      kind: Name,
                      id: x,
                    },
                    op: PostIncrement,
                  },
                },
                condition: {
                  kind: BinaryExpr,
                  left: {
                    kind: Name,
                    id: x,
                  },
                  op: Less,
                  right: {
                    kind: LiteralExpr,
                    literalClass: java.lang.Integer,
                    literalString: 100,
                  },
                },
              },
              {
                kind: ForeachStmt,
                body: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: UnaryExpr,
                        expr: {
                          kind: Name,
                          id: x,
                        },
                        op: PostDecrement,
                      },
                    },
                  ],
                },
                iterable: {
                  kind: ArrayAccessExpr,
                  index: {
                    kind: LiteralExpr,
                    literalClass: java.lang.Integer,
                    literalString: 0,
                  },
                  name: {
                    kind: Name,
                    id: arr4,
                  },
                },
                var: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                      {
                        kind: MarkerAnnotationExpr,
                        name: Deprecated,
                      },
                    ],
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: i,
                        },
                        init: null,
                      },
                    ],
                  },
                },
              },
              {
                kind: ForStmt,
                body: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: BreakStmt,
                      id: null,
                    },
                  ],
                },
                compare: {
                  kind: BinaryExpr,
                  left: {
                    kind: Name,
                    id: i,
                  },
                  op: Less,
                  right: {
                    kind: LiteralExpr,
                    literalClass: java.lang.Integer,
                    literalString: 10,
                  },
                },
                init: [
                  {
                    kind: VariableDeclarationExpr,
                    declaration: {
                      kind: LocalVariableDecl,
                      modifiers: [
                        {
                          kind: MarkerAnnotationExpr,
                          name: Deprecated,
                        },
                        {
                          kind: Modifier,
                          keyword: Final,
                        },
                      ],
                      type: {
                        kind: PrimitiveType,
                        annotations: [
                        ],
                        primitive: Int,
                      },
                      variables: [
                        {
                          kind: VariableDeclarator,
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: i,
                          },
                          init: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 0,
                          },
                        },
                        {
                          kind: VariableDeclarator,
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: j,
                          },
                          init: {
                            kind: LiteralExpr,
                            literalClass: java.lang.Integer,
                            literalString: 1,
                          },
                        },
                      ],
                    },
                  },
                ],
                update: [
                  {
                    kind: UnaryExpr,
                    expr: {
                      kind: Name,
                      id: x,
                    },
                    op: PostIncrement,
                  },
                ],
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: i,
                        },
                        init: null,
                      },
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: j,
                        },
                        init: null,
                      },
                    ],
                  },
                },
              },
              {
                kind: ForStmt,
                body: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: BreakStmt,
                      id: null,
                    },
                  ],
                },
                compare: {
                  kind: BinaryExpr,
                  left: {
                    kind: BinaryExpr,
                    left: {
                      kind: Name,
                      id: i,
                    },
                    op: Less,
                    right: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 10,
                    },
                  },
                  op: And,
                  right: {
                    kind: BinaryExpr,
                    left: {
                      kind: Name,
                      id: j,
                    },
                    op: Less,
                    right: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 2,
                    },
                  },
                },
                init: [
                  {
                    kind: AssignExpr,
                    op: Normal,
                    target: {
                      kind: Name,
                      id: i,
                    },
                    value: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 0,
                    },
                  },
                  {
                    kind: AssignExpr,
                    op: Normal,
                    target: {
                      kind: Name,
                      id: j,
                    },
                    value: {
                      kind: LiteralExpr,
                      literalClass: java.lang.Integer,
                      literalString: 1,
                    },
                  },
                ],
                update: [
                  {
                    kind: UnaryExpr,
                    expr: {
                      kind: Name,
                      id: i,
                    },
                    op: PostIncrement,
                  },
                  {
                    kind: UnaryExpr,
                    expr: {
                      kind: Name,
                      id: j,
                    },
                    op: PostDecrement,
                  },
                ],
              },
            ],
          },
          dims: [
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: Public,
            },
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          name: main,
          params: [
            {
              kind: FormalParameter,
              ellipsisAnnotations: [
              ],
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: args,
              },
              isReceiver: false,
              isVarArgs: false,
              modifiers: [
              ],
              receiverTypeName: null,
              type: {
                kind: ArrayType,
                componentType: {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: String,
                  scope: null,
                  typeArgs: null,
                },
                dims: [
                  {
                    kind: ArrayDim,
                    annotations: [
                    ],
                  },
                ],
              },
            },
          ],
          throwsClause: [
            {
              kind: QualifiedType,
              annotations: [
              ],
              name: ParseException,
              scope: null,
              typeArgs: null,
            },
            {
              kind: QualifiedType,
              annotations: [
              ],
              name: IOException,
              scope: null,
              typeArgs: null,
            },
          ],
          type: {
            kind: VoidType,
          },
          typeParams: [
          ],
        },
        {
          kind: MethodDecl,
          additionalAnnotations: [
          ],
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: String,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: a,
                        },
                        init: {
                          kind: ParenthesizedExpr,
                          inner: {
                            kind: CastExpr,
                            expr: {
                              kind: LiteralExpr,
                              literalClass: java.lang.String,
                              literalString: "qwe",
                            },
                            type: {
                              kind: QualifiedType,
                              annotations: [
                              ],
                              name: String,
                              scope: null,
                              typeArgs: null,
                            },
                          },
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: String,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: x,
                        },
                        init: {
                          kind: ParenthesizedExpr,
                          inner: {
                            kind: CastExpr,
                            expr: {
                              kind: MethodInvocationExpr,
                              args: [
                              ],
                              name: getName,
                              scope: clz1,
                              typeArgs: [
                              ],
                            },
                            type: {
                              kind: QualifiedType,
                              annotations: [
                              ],
                              name: String,
                              scope: null,
                              typeArgs: null,
                            },
                          },
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: PrimitiveType,
                      annotations: [
                      ],
                      primitive: Int,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: y,
                        },
                        init: {
                          kind: MethodInvocationExpr,
                          args: [
                          ],
                          name: intValue,
                          scope: {
                            kind: ParenthesizedExpr,
                            inner: {
                              kind: CastExpr,
                              expr: {
                                kind: CastExpr,
                                expr: {
                                  kind: Name,
                                  id: x,
                                },
                                type: {
                                  kind: QualifiedType,
                                  annotations: [
                                  ],
                                  name: Object,
                                  scope: null,
                                  typeArgs: null,
                                },
                              },
                              type: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: Integer,
                                scope: null,
                                typeArgs: null,
                              },
                            },
                          },
                          typeArgs: [
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: SynchronizedStmt,
                block: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: AssignExpr,
                        op: Normal,
                        target: {
                          kind: Name,
                          id: file,
                        },
                        value: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Void,
                          literalString: null,
                        },
                      },
                    },
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: AssignExpr,
                        op: Normal,
                        target: {
                          kind: Name,
                          id: file,
                        },
                        value: {
                          kind: ObjectCreationExpr,
                          args: [
                            {
                              kind: LiteralExpr,
                              literalClass: java.lang.String,
                              literalString: "",
                            },
                          ],
                          body: null,
                          scope: null,
                          type: {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: File,
                            scope: null,
                            typeArgs: null,
                          },
                          typeArgs: [
                          ],
                        },
                      },
                    },
                  ],
                },
                expr: {
                  kind: Name,
                  id: file,
                },
              },
              {
                kind: TryStmt,
                catchs: [
                  {
                    kind: CatchClause,
                    catchBlock: {
                      kind: BlockStmt,
                      stmts: [
                        {
                          kind: ExpressionStmt,
                          expr: {
                            kind: MethodInvocationExpr,
                            args: [
                              {
                                kind: LiteralExpr,
                                literalClass: java.lang.String,
                                literalString: "catch",
                              },
                            ],
                            name: println,
                            scope: {
                              kind: FieldAccessExpr,
                              name: out,
                              scope: System,
                            },
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                    param: {
                      kind: FormalParameter,
                      ellipsisAnnotations: [
                      ],
                      id: {
                        kind: VariableDeclaratorId,
                        dims: [
                        ],
                        name: e,
                      },
                      isReceiver: false,
                      isVarArgs: false,
                      modifiers: [
                        {
                          kind: Modifier,
                          keyword: Final,
                        },
                      ],
                      receiverTypeName: null,
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: NullPointerException,
                        scope: null,
                        typeArgs: null,
                      },
                    },
                  },
                  {
                    kind: CatchClause,
                    catchBlock: {
                      kind: BlockStmt,
                      stmts: [
                        {
                          kind: ExpressionStmt,
                          expr: {
                            kind: MethodInvocationExpr,
                            args: [
                              {
                                kind: LiteralExpr,
                                literalClass: java.lang.String,
                                literalString: "catch",
                              },
                            ],
                            name: println,
                            scope: {
                              kind: FieldAccessExpr,
                              name: out,
                              scope: System,
                            },
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                    param: {
                      kind: FormalParameter,
                      ellipsisAnnotations: [
                      ],
                      id: {
                        kind: VariableDeclaratorId,
                        dims: [
                        ],
                        name: e,
                      },
                      isReceiver: false,
                      isVarArgs: false,
                      modifiers: [
                      ],
                      receiverTypeName: null,
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: RuntimeException,
                        scope: null,
                        typeArgs: null,
                      },
                    },
                  },
                ],
                finallyBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: MethodInvocationExpr,
                        args: [
                          {
                            kind: LiteralExpr,
                            literalClass: java.lang.String,
                            literalString: "finally",
                          },
                        ],
                        name: println,
                        scope: {
                          kind: FieldAccessExpr,
                          name: out,
                          scope: System,
                        },
                        typeArgs: [
                        ],
                      },
                    },
                  ],
                },
                resources: [
                ],
                trailingSemiColon: false,
                tryBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: IfStmt,
                      condition: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: file,
                        },
                        op: Equal,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Void,
                          literalString: null,
                        },
                      },
                      elseStmt: null,
                      thenStmt: {
                        kind: BlockStmt,
                        stmts: [
                          {
                            kind: ThrowStmt,
                            expr: {
                              kind: ObjectCreationExpr,
                              args: [
                                {
                                  kind: LiteralExpr,
                                  literalClass: java.lang.String,
                                  literalString: "blah",
                                },
                              ],
                              body: null,
                              scope: null,
                              type: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: NullPointerException,
                                scope: null,
                                typeArgs: null,
                              },
                              typeArgs: [
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: TryStmt,
                catchs: [
                ],
                finallyBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: MethodInvocationExpr,
                        args: [
                          {
                            kind: LiteralExpr,
                            literalClass: java.lang.String,
                            literalString: "finally",
                          },
                        ],
                        name: println,
                        scope: {
                          kind: FieldAccessExpr,
                          name: out,
                          scope: System,
                        },
                        typeArgs: [
                        ],
                      },
                    },
                  ],
                },
                resources: [
                ],
                trailingSemiColon: false,
                tryBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: IfStmt,
                      condition: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: file,
                        },
                        op: Equal,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Void,
                          literalString: null,
                        },
                      },
                      elseStmt: null,
                      thenStmt: {
                        kind: BlockStmt,
                        stmts: [
                          {
                            kind: ThrowStmt,
                            expr: {
                              kind: ObjectCreationExpr,
                              args: [
                                {
                                  kind: LiteralExpr,
                                  literalClass: java.lang.String,
                                  literalString: "blah",
                                },
                              ],
                              body: null,
                              scope: null,
                              type: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: NullPointerException,
                                scope: null,
                                typeArgs: null,
                              },
                              typeArgs: [
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: TryStmt,
                catchs: [
                  {
                    kind: CatchClause,
                    catchBlock: {
                      kind: BlockStmt,
                      stmts: [
                        {
                          kind: ExpressionStmt,
                          expr: {
                            kind: MethodInvocationExpr,
                            args: [
                              {
                                kind: LiteralExpr,
                                literalClass: java.lang.String,
                                literalString: "catch",
                              },
                            ],
                            name: println,
                            scope: {
                              kind: FieldAccessExpr,
                              name: out,
                              scope: System,
                            },
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                    param: {
                      kind: FormalParameter,
                      ellipsisAnnotations: [
                      ],
                      id: {
                        kind: VariableDeclaratorId,
                        dims: [
                        ],
                        name: e,
                      },
                      isReceiver: false,
                      isVarArgs: false,
                      modifiers: [
                      ],
                      receiverTypeName: null,
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: RuntimeException,
                        scope: null,
                        typeArgs: null,
                      },
                    },
                  },
                ],
                finallyBlock: null,
                resources: [
                ],
                trailingSemiColon: false,
                tryBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: IfStmt,
                      condition: {
                        kind: BinaryExpr,
                        left: {
                          kind: Name,
                          id: file,
                        },
                        op: Equal,
                        right: {
                          kind: LiteralExpr,
                          literalClass: java.lang.Void,
                          literalString: null,
                        },
                      },
                      elseStmt: null,
                      thenStmt: {
                        kind: BlockStmt,
                        stmts: [
                          {
                            kind: ThrowStmt,
                            expr: {
                              kind: ObjectCreationExpr,
                              args: [
                                {
                                  kind: LiteralExpr,
                                  literalClass: java.lang.String,
                                  literalString: "blah",
                                },
                              ],
                              body: null,
                              scope: null,
                              type: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: NullPointerException,
                                scope: null,
                                typeArgs: null,
                              },
                              typeArgs: [
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: TryStmt,
                catchs: [
                  {
                    kind: CatchClause,
                    catchBlock: {
                      kind: BlockStmt,
                      stmts: [
                        {
                          kind: ExpressionStmt,
                          expr: {
                            kind: MethodInvocationExpr,
                            args: [
                              {
                                kind: LiteralExpr,
                                literalClass: java.lang.String,
                                literalString: "catch",
                              },
                            ],
                            name: println,
                            scope: {
                              kind: FieldAccessExpr,
                              name: out,
                              scope: System,
                            },
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                    param: {
                      kind: FormalParameter,
                      ellipsisAnnotations: [
                      ],
                      id: {
                        kind: VariableDeclaratorId,
                        dims: [
                        ],
                        name: e,
                      },
                      isReceiver: false,
                      isVarArgs: false,
                      modifiers: [
                      ],
                      receiverTypeName: null,
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: IOException,
                        scope: null,
                        typeArgs: null,
                      },
                    },
                  },
                ],
                finallyBlock: null,
                resources: [
                  {
                    kind: VariableDeclarationExpr,
                    declaration: {
                      kind: LocalVariableDecl,
                      modifiers: [
                      ],
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: InputStream,
                        scope: null,
                        typeArgs: null,
                      },
                      variables: [
                        {
                          kind: VariableDeclarator,
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: in,
                          },
                          init: {
                            kind: MethodInvocationExpr,
                            args: [
                            ],
                            name: createInputStream,
                            scope: null,
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
                trailingSemiColon: false,
                tryBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: MethodInvocationExpr,
                        args: [
                          in,
                        ],
                        name: println,
                        scope: {
                          kind: FieldAccessExpr,
                          name: out,
                          scope: System,
                        },
                        typeArgs: [
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: TryStmt,
                catchs: [
                  {
                    kind: CatchClause,
                    catchBlock: {
                      kind: BlockStmt,
                      stmts: [
                        {
                          kind: ExpressionStmt,
                          expr: {
                            kind: MethodInvocationExpr,
                            args: [
                              {
                                kind: LiteralExpr,
                                literalClass: java.lang.String,
                                literalString: "catch",
                              },
                            ],
                            name: println,
                            scope: {
                              kind: FieldAccessExpr,
                              name: out,
                              scope: System,
                            },
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                    param: {
                      kind: FormalParameter,
                      ellipsisAnnotations: [
                      ],
                      id: {
                        kind: VariableDeclaratorId,
                        dims: [
                        ],
                        name: e,
                      },
                      isReceiver: false,
                      isVarArgs: false,
                      modifiers: [
                      ],
                      receiverTypeName: null,
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: IOException,
                        scope: null,
                        typeArgs: null,
                      },
                    },
                  },
                ],
                finallyBlock: null,
                resources: [
                  {
                    kind: VariableDeclarationExpr,
                    declaration: {
                      kind: LocalVariableDecl,
                      modifiers: [
                      ],
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: InputStream,
                        scope: null,
                        typeArgs: null,
                      },
                      variables: [
                        {
                          kind: VariableDeclarator,
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: in,
                          },
                          init: {
                            kind: MethodInvocationExpr,
                            args: [
                            ],
                            name: createInputStream,
                            scope: null,
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: VariableDeclarationExpr,
                    declaration: {
                      kind: LocalVariableDecl,
                      modifiers: [
                      ],
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: InputStream,
                        scope: null,
                        typeArgs: null,
                      },
                      variables: [
                        {
                          kind: VariableDeclarator,
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: in2,
                          },
                          init: {
                            kind: MethodInvocationExpr,
                            args: [
                            ],
                            name: createInputStream,
                            scope: null,
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
                trailingSemiColon: false,
                tryBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: MethodInvocationExpr,
                        args: [
                          in,
                        ],
                        name: println,
                        scope: {
                          kind: FieldAccessExpr,
                          name: out,
                          scope: System,
                        },
                        typeArgs: [
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: TryStmt,
                catchs: [
                ],
                finallyBlock: null,
                resources: [
                  {
                    kind: VariableDeclarationExpr,
                    declaration: {
                      kind: LocalVariableDecl,
                      modifiers: [
                      ],
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: InputStream,
                        scope: null,
                        typeArgs: null,
                      },
                      variables: [
                        {
                          kind: VariableDeclarator,
                          id: {
                            kind: VariableDeclaratorId,
                            dims: [
                            ],
                            name: in,
                          },
                          init: {
                            kind: MethodInvocationExpr,
                            args: [
                            ],
                            name: createInputStream,
                            scope: null,
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
                trailingSemiColon: false,
                tryBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: MethodInvocationExpr,
                        args: [
                          in,
                        ],
                        name: println,
                        scope: {
                          kind: FieldAccessExpr,
                          name: out,
                          scope: System,
                        },
                        typeArgs: [
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: TryStmt,
                catchs: [
                  {
                    kind: CatchClause,
                    catchBlock: {
                      kind: BlockStmt,
                      stmts: [
                        {
                          kind: ExpressionStmt,
                          expr: {
                            kind: MethodInvocationExpr,
                            args: [
                              e,
                            ],
                            name: println,
                            scope: {
                              kind: FieldAccessExpr,
                              name: out,
                              scope: System,
                            },
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                    param: {
                      kind: FormalParameter,
                      ellipsisAnnotations: [
                      ],
                      id: {
                        kind: VariableDeclaratorId,
                        dims: [
                        ],
                        name: e,
                      },
                      isReceiver: false,
                      isVarArgs: false,
                      modifiers: [
                      ],
                      receiverTypeName: null,
                      type: {
                        kind: QualifiedType,
                        annotations: [
                        ],
                        name: RuntimeException,
                        scope: null,
                        typeArgs: null,
                      },
                    },
                  },
                  {
                    kind: CatchClause,
                    catchBlock: {
                      kind: BlockStmt,
                      stmts: [
                        {
                          kind: ExpressionStmt,
                          expr: {
                            kind: MethodInvocationExpr,
                            args: [
                              e,
                            ],
                            name: println,
                            scope: {
                              kind: FieldAccessExpr,
                              name: out,
                              scope: System,
                            },
                            typeArgs: [
                            ],
                          },
                        },
                      ],
                    },
                    param: {
                      kind: FormalParameter,
                      ellipsisAnnotations: [
                      ],
                      id: {
                        kind: VariableDeclaratorId,
                        dims: [
                        ],
                        name: e,
                      },
                      isReceiver: false,
                      isVarArgs: false,
                      modifiers: [
                        {
                          kind: Modifier,
                          keyword: Final,
                        },
                      ],
                      receiverTypeName: null,
                      type: {
                        kind: UnionType,
                        types: [
                          {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: Exception,
                            scope: null,
                            typeArgs: null,
                          },
                          {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: Error,
                            scope: null,
                            typeArgs: null,
                          },
                        ],
                      },
                    },
                  },
                ],
                finallyBlock: null,
                resources: [
                ],
                trailingSemiColon: false,
                tryBlock: {
                  kind: BlockStmt,
                  stmts: [
                    {
                      kind: ExpressionStmt,
                      expr: {
                        kind: MethodInvocationExpr,
                        args: [
                          {
                            kind: LiteralExpr,
                            literalClass: java.lang.String,
                            literalString: "whatever",
                          },
                        ],
                        name: println,
                        scope: {
                          kind: FieldAccessExpr,
                          name: out,
                          scope: System,
                        },
                        typeArgs: [
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: ReturnStmt,
                expr: {
                  kind: MethodInvocationExpr,
                  args: [
                    file,
                  ],
                  name: parse,
                  scope: JavaParser,
                  typeArgs: [
                  ],
                },
              },
            ],
          },
          dims: [
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: Public,
            },
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          name: parse,
          params: [
            {
              kind: FormalParameter,
              ellipsisAnnotations: [
              ],
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: file,
              },
              isReceiver: false,
              isVarArgs: false,
              modifiers: [
                {
                  kind: MarkerAnnotationExpr,
                  name: Deprecated,
                },
              ],
              receiverTypeName: null,
              type: {
                kind: QualifiedType,
                annotations: [
                ],
                name: File,
                scope: null,
                typeArgs: null,
              },
            },
          ],
          throwsClause: [
            {
              kind: QualifiedType,
              annotations: [
              ],
              name: ParseException,
              scope: null,
              typeArgs: null,
            },
            {
              kind: QualifiedType,
              annotations: [
              ],
              name: IOException,
              scope: null,
              typeArgs: null,
            },
          ],
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: CompilationUnit,
            scope: null,
            typeArgs: null,
          },
          typeParams: [
          ],
        },
        {
          kind: ClassDecl,
          extendsClause: null,
          implementsClause: [
            {
              kind: QualifiedType,
              annotations: [
              ],
              name: XXX,
              scope: null,
              typeArgs: null,
            },
            {
              kind: QualifiedType,
              annotations: [
              ],
              name: Serializable,
              scope: null,
              typeArgs: null,
            },
          ],
          members: [
            {
              kind: ConstructorDecl,
              body: {
                kind: BlockStmt,
                stmts: [
                ],
              },
              modifiers: [
                {
                  kind: Modifier,
                  keyword: Public,
                },
              ],
              name: A,
              params: [
                {
                  kind: FormalParameter,
                  ellipsisAnnotations: [
                  ],
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: integer,
                  },
                  isReceiver: false,
                  isVarArgs: false,
                  modifiers: [
                  ],
                  receiverTypeName: null,
                  type: {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: Integer,
                    scope: null,
                    typeArgs: null,
                  },
                },
                {
                  kind: FormalParameter,
                  ellipsisAnnotations: [
                  ],
                  id: {
                    kind: VariableDeclaratorId,
                    dims: [
                    ],
                    name: string,
                  },
                  isReceiver: false,
                  isVarArgs: false,
                  modifiers: [
                  ],
                  receiverTypeName: null,
                  type: {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: ABC,
                    scope: null,
                    typeArgs: null,
                  },
                },
              ],
              throwsClause: [
                {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: Exception,
                  scope: null,
                  typeArgs: null,
                },
                {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: IOException,
                  scope: null,
                  typeArgs: null,
                },
              ],
              typeParams: [
                {
                  kind: TypeParameter,
                  annotations: [
                  ],
                  bounds: [
                  ],
                  name: ABC,
                },
              ],
            },
          ],
          modifiers: [
          ],
          name: A,
          typeParams: [
            {
              kind: TypeParameter,
              annotations: [
              ],
              bounds: [
                {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: Integer,
                  scope: null,
                  typeArgs: null,
                },
                {
                  kind: QualifiedType,
                  annotations: [
                  ],
                  name: Serializable,
                  scope: null,
                  typeArgs: null,
                },
              ],
              name: T,
            },
          ],
        },
        {
          kind: MethodDecl,
          additionalAnnotations: [
          ],
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                      {
                        kind: MarkerAnnotationExpr,
                        name: Deprecated,
                      },
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: Comparator,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: c,
                        },
                        init: {
                          kind: ObjectCreationExpr,
                          args: [
                          ],
                          body: [
                            {
                              kind: MethodDecl,
                              additionalAnnotations: [
                              ],
                              body: {
                                kind: BlockStmt,
                                stmts: [
                                  {
                                    kind: TryStmt,
                                    catchs: [
                                      {
                                        kind: CatchClause,
                                        catchBlock: {
                                          kind: BlockStmt,
                                          stmts: [
                                          ],
                                        },
                                        param: {
                                          kind: FormalParameter,
                                          ellipsisAnnotations: [
                                          ],
                                          id: {
                                            kind: VariableDeclaratorId,
                                            dims: [
                                            ],
                                            name: e,
                                          },
                                          isReceiver: false,
                                          isVarArgs: false,
                                          modifiers: [
                                          ],
                                          receiverTypeName: null,
                                          type: {
                                            kind: QualifiedType,
                                            annotations: [
                                            ],
                                            name: Exception,
                                            scope: null,
                                            typeArgs: null,
                                          },
                                        },
                                      },
                                    ],
                                    finallyBlock: null,
                                    resources: [
                                    ],
                                    trailingSemiColon: false,
                                    tryBlock: {
                                      kind: BlockStmt,
                                      stmts: [
                                        {
                                          kind: ExpressionStmt,
                                          expr: {
                                            kind: VariableDeclarationExpr,
                                            declaration: {
                                              kind: LocalVariableDecl,
                                              modifiers: [
                                              ],
                                              type: {
                                                kind: QualifiedType,
                                                annotations: [
                                                ],
                                                name: A,
                                                scope: null,
                                                typeArgs: [
                                                  {
                                                    kind: QualifiedType,
                                                    annotations: [
                                                    ],
                                                    name: Integer,
                                                    scope: null,
                                                    typeArgs: null,
                                                  },
                                                ],
                                              },
                                              variables: [
                                                {
                                                  kind: VariableDeclarator,
                                                  id: {
                                                    kind: VariableDeclaratorId,
                                                    dims: [
                                                    ],
                                                    name: a,
                                                  },
                                                  init: {
                                                    kind: ObjectCreationExpr,
                                                    args: [
                                                      {
                                                        kind: ObjectCreationExpr,
                                                        args: [
                                                          {
                                                            kind: LiteralExpr,
                                                            literalClass: java.lang.Integer,
                                                            literalString: 11,
                                                          },
                                                        ],
                                                        body: null,
                                                        scope: null,
                                                        type: {
                                                          kind: QualifiedType,
                                                          annotations: [
                                                          ],
                                                          name: Integer,
                                                          scope: null,
                                                          typeArgs: null,
                                                        },
                                                        typeArgs: [
                                                        ],
                                                      },
                                                      {
                                                        kind: LiteralExpr,
                                                        literalClass: java.lang.String,
                                                        literalString: "foo",
                                                      },
                                                    ],
                                                    body: [
                                                    ],
                                                    scope: null,
                                                    type: {
                                                      kind: QualifiedType,
                                                      annotations: [
                                                      ],
                                                      name: A,
                                                      scope: null,
                                                      typeArgs: [
                                                        {
                                                          kind: QualifiedType,
                                                          annotations: [
                                                          ],
                                                          name: Integer,
                                                          scope: null,
                                                          typeArgs: null,
                                                        },
                                                      ],
                                                    },
                                                    typeArgs: [
                                                      {
                                                        kind: QualifiedType,
                                                        annotations: [
                                                        ],
                                                        name: String,
                                                        scope: null,
                                                        typeArgs: null,
                                                      },
                                                    ],
                                                  },
                                                },
                                              ],
                                            },
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: ReturnStmt,
                                    expr: {
                                      kind: LiteralExpr,
                                      literalClass: java.lang.Integer,
                                      literalString: 0,
                                    },
                                  },
                                ],
                              },
                              dims: [
                              ],
                              modifiers: [
                                {
                                  kind: Modifier,
                                  keyword: Public,
                                },
                              ],
                              name: compare,
                              params: [
                                {
                                  kind: FormalParameter,
                                  ellipsisAnnotations: [
                                  ],
                                  id: {
                                    kind: VariableDeclaratorId,
                                    dims: [
                                    ],
                                    name: o1,
                                  },
                                  isReceiver: false,
                                  isVarArgs: false,
                                  modifiers: [
                                  ],
                                  receiverTypeName: null,
                                  type: {
                                    kind: QualifiedType,
                                    annotations: [
                                    ],
                                    name: Object,
                                    scope: null,
                                    typeArgs: null,
                                  },
                                },
                                {
                                  kind: FormalParameter,
                                  ellipsisAnnotations: [
                                  ],
                                  id: {
                                    kind: VariableDeclaratorId,
                                    dims: [
                                    ],
                                    name: o2,
                                  },
                                  isReceiver: false,
                                  isVarArgs: false,
                                  modifiers: [
                                  ],
                                  receiverTypeName: null,
                                  type: {
                                    kind: QualifiedType,
                                    annotations: [
                                    ],
                                    name: Object,
                                    scope: null,
                                    typeArgs: null,
                                  },
                                },
                              ],
                              throwsClause: [
                              ],
                              type: {
                                kind: PrimitiveType,
                                annotations: [
                                ],
                                primitive: Int,
                              },
                              typeParams: [
                              ],
                            },
                            {
                              kind: MethodDecl,
                              additionalAnnotations: [
                              ],
                              body: {
                                kind: BlockStmt,
                                stmts: [
                                  {
                                    kind: ReturnStmt,
                                    expr: {
                                      kind: MethodInvocationExpr,
                                      args: [
                                        obj,
                                      ],
                                      name: equals,
                                      scope: {
                                        kind: SuperExpr,
                                        classExpr: null,
                                      },
                                      typeArgs: [
                                      ],
                                    },
                                  },
                                ],
                              },
                              dims: [
                              ],
                              modifiers: [
                                {
                                  kind: MarkerAnnotationExpr,
                                  name: Override,
                                },
                                {
                                  kind: Modifier,
                                  keyword: Public,
                                },
                              ],
                              name: equals,
                              params: [
                                {
                                  kind: FormalParameter,
                                  ellipsisAnnotations: [
                                  ],
                                  id: {
                                    kind: VariableDeclaratorId,
                                    dims: [
                                    ],
                                    name: obj,
                                  },
                                  isReceiver: false,
                                  isVarArgs: false,
                                  modifiers: [
                                  ],
                                  receiverTypeName: null,
                                  type: {
                                    kind: QualifiedType,
                                    annotations: [
                                    ],
                                    name: Object,
                                    scope: null,
                                    typeArgs: null,
                                  },
                                },
                              ],
                              throwsClause: [
                              ],
                              type: {
                                kind: PrimitiveType,
                                annotations: [
                                ],
                                primitive: Boolean,
                              },
                              typeParams: [
                              ],
                            },
                          ],
                          scope: null,
                          type: {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: Comparator,
                            scope: null,
                            typeArgs: null,
                          },
                          typeArgs: [
                          ],
                        },
                      },
                    ],
                  },
                },
              },
            ],
          },
          dims: [
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: Private,
            },
          ],
          name: x,
          params: [
            {
              kind: FormalParameter,
              ellipsisAnnotations: [
              ],
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: x,
              },
              isReceiver: false,
              isVarArgs: false,
              modifiers: [
              ],
              receiverTypeName: null,
              type: {
                kind: QualifiedType,
                annotations: [
                ],
                name: Map,
                scope: null,
                typeArgs: [
                  {
                    kind: WildcardType,
                    annotations: [
                    ],
                    ext: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: X,
                      scope: null,
                      typeArgs: null,
                    },
                    sup: null,
                  },
                  {
                    kind: WildcardType,
                    annotations: [
                    ],
                    ext: null,
                    sup: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: T,
                      scope: null,
                      typeArgs: null,
                    },
                  },
                ],
              },
            },
          ],
          throwsClause: [
          ],
          type: {
            kind: VoidType,
          },
          typeParams: [
            {
              kind: TypeParameter,
              annotations: [
              ],
              bounds: [
              ],
              name: Y,
            },
          ],
        },
        {
          kind: MethodDecl,
          additionalAnnotations: [
          ],
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ReturnStmt,
                expr: {
                  kind: ObjectCreationExpr,
                  args: [
                    {
                      kind: LiteralExpr,
                      literalClass: java.lang.Void,
                      literalString: null,
                    },
                  ],
                  body: null,
                  scope: null,
                  type: {
                    kind: QualifiedType,
                    annotations: [
                    ],
                    name: ByteArrayInputStream,
                    scope: null,
                    typeArgs: null,
                  },
                  typeArgs: [
                  ],
                },
              },
            ],
          },
          dims: [
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: Private,
            },
            {
              kind: Modifier,
              keyword: Static,
            },
          ],
          name: createInputStream,
          params: [
          ],
          throwsClause: [
          ],
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: InputStream,
            scope: null,
            typeArgs: null,
          },
          typeParams: [
          ],
        },
      ],
      modifiers: [
        {
          kind: MarkerAnnotationExpr,
          name: Ignore,
        },
        {
          kind: MarkerAnnotationExpr,
          name: Deprecated,
        },
        {
          kind: Modifier,
          keyword: Public,
        },
      ],
      name: JavaConcepts,
      typeParams: [
        {
          kind: TypeParameter,
          annotations: [
          ],
          bounds: [
            {
              kind: QualifiedType,
              annotations: [
              ],
              name: List,
              scope: null,
              typeArgs: [
                {
                  kind: ArrayType,
                  componentType: {
                    kind: PrimitiveType,
                    annotations: [
                    ],
                    primitive: Int,
                  },
                  dims: [
                    {
                      kind: ArrayDim,
                      annotations: [
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          name: T,
        },
        {
          kind: TypeParameter,
          annotations: [
          ],
          bounds: [
          ],
          name: X,
        },
      ],
    },
    {
      kind: ClassDecl,
      extendsClause: null,
      implementsClause: [
      ],
      members: [
        {
          kind: MethodDecl,
          additionalAnnotations: [
          ],
          body: {
            kind: BlockStmt,
            stmts: [
            ],
          },
          dims: [
          ],
          modifiers: [
            {
              kind: Modifier,
              keyword: Public,
            },
          ],
          name: check2,
          params: [
            {
              kind: FormalParameter,
              ellipsisAnnotations: [
              ],
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: val1,
              },
              isReceiver: false,
              isVarArgs: false,
              modifiers: [
              ],
              receiverTypeName: null,
              type: {
                kind: QualifiedType,
                annotations: [
                ],
                name: A,
                scope: null,
                typeArgs: null,
              },
            },
            {
              kind: FormalParameter,
              ellipsisAnnotations: [
              ],
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: val2,
              },
              isReceiver: false,
              isVarArgs: false,
              modifiers: [
              ],
              receiverTypeName: null,
              type: {
                kind: QualifiedType,
                annotations: [
                ],
                name: B,
                scope: null,
                typeArgs: null,
              },
            },
          ],
          throwsClause: [
          ],
          type: {
            kind: VoidType,
          },
          typeParams: [
            {
              kind: TypeParameter,
              annotations: [
              ],
              bounds: [
              ],
              name: A,
            },
            {
              kind: TypeParameter,
              annotations: [
              ],
              bounds: [
              ],
              name: B,
            },
          ],
        },
      ],
      modifiers: [
      ],
      name: Base,
      typeParams: [
      ],
    },
    {
      kind: InterfaceDecl,
      extendsClause: [
        {
          kind: QualifiedType,
          annotations: [
          ],
          name: Serializable,
          scope: null,
          typeArgs: null,
        },
        {
          kind: QualifiedType,
          annotations: [
          ],
          name: Cloneable,
          scope: null,
          typeArgs: null,
        },
      ],
      members: [
      ],
      modifiers: [
      ],
      name: XXX,
      typeParams: [
      ],
    },
    {
      kind: EmptyTypeDecl,
    },
    {
      kind: AnnotationDecl,
      members: [
        {
          kind: AnnotationMemberDecl,
          defaultValue: null,
          dims: [
          ],
          modifiers: [
          ],
          name: value,
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Int,
          },
        },
      ],
      modifiers: [
      ],
      name: AnAnnotation,
    },
    {
      kind: AnnotationDecl,
      members: [
        {
          kind: AnnotationMemberDecl,
          defaultValue: null,
          dims: [
          ],
          modifiers: [
          ],
          name: anIntMember,
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Int,
          },
        },
        {
          kind: AnnotationMemberDecl,
          defaultValue: {
            kind: LiteralExpr,
            literalClass: java.lang.Integer,
            literalString: 42,
          },
          dims: [
          ],
          modifiers: [
          ],
          name: anIntMemberWithDefault,
          type: {
            kind: PrimitiveType,
            annotations: [
            ],
            primitive: Int,
          },
        },
        {
          kind: AnnotationMemberDecl,
          defaultValue: null,
          dims: [
          ],
          modifiers: [
          ],
          name: aStringMember,
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: String,
            scope: null,
            typeArgs: null,
          },
        },
        {
          kind: AnnotationMemberDecl,
          defaultValue: {
            kind: LiteralExpr,
            literalClass: java.lang.String,
            literalString: "FortyTwo",
          },
          dims: [
          ],
          modifiers: [
          ],
          name: aStringMemberWithDefault,
          type: {
            kind: QualifiedType,
            annotations: [
            ],
            name: String,
            scope: null,
            typeArgs: null,
          },
        },
        {
          kind: AnnotationMemberDecl,
          defaultValue: null,
          dims: [
          ],
          modifiers: [
          ],
          name: aStringArrayMember,
          type: {
            kind: ArrayType,
            componentType: {
              kind: QualifiedType,
              annotations: [
              ],
              name: String,
              scope: null,
              typeArgs: null,
            },
            dims: [
              {
                kind: ArrayDim,
                annotations: [
                ],
              },
            ],
          },
        },
      ],
      modifiers: [
      ],
      name: AnAnnotationWithPairs,
    },
    {
      kind: ClassDecl,
      extendsClause: null,
      implementsClause: [
      ],
      members: [
        {
          kind: MethodDecl,
          additionalAnnotations: [
          ],
          body: {
            kind: BlockStmt,
            stmts: [
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: AClassType,
                      scope: null,
                      typeArgs: null,
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: o,
                        },
                        init: {
                          kind: CastExpr,
                          expr: {
                            kind: Name,
                            id: object,
                          },
                          type: {
                            kind: IntersectionType,
                            types: [
                              {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: AClassType,
                                scope: null,
                                typeArgs: null,
                              },
                              {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: AnInterfaceType,
                                scope: null,
                                typeArgs: null,
                              },
                            ],
                          },
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: F1,
                      scope: null,
                      typeArgs: [
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                      ],
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: f1,
                        },
                        init: {
                          kind: LambdaExpr,
                          body: x,
                          hasParens: false,
                          params: [
                            {
                              kind: FormalParameter,
                              ellipsisAnnotations: [
                              ],
                              id: {
                                kind: VariableDeclaratorId,
                                dims: [
                                ],
                                name: x,
                              },
                              isReceiver: false,
                              isVarArgs: false,
                              modifiers: [
                              ],
                              receiverTypeName: null,
                              type: {
                                kind: UnknownType,
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: F1,
                      scope: null,
                      typeArgs: [
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                      ],
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: f2,
                        },
                        init: {
                          kind: LambdaExpr,
                          body: x,
                          hasParens: true,
                          params: [
                            {
                              kind: FormalParameter,
                              ellipsisAnnotations: [
                              ],
                              id: {
                                kind: VariableDeclaratorId,
                                dims: [
                                ],
                                name: x,
                              },
                              isReceiver: false,
                              isVarArgs: false,
                              modifiers: [
                              ],
                              receiverTypeName: null,
                              type: {
                                kind: UnknownType,
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: F2,
                      scope: null,
                      typeArgs: [
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                      ],
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: f3,
                        },
                        init: {
                          kind: LambdaExpr,
                          body: {
                            kind: BinaryExpr,
                            left: {
                              kind: Name,
                              id: x,
                            },
                            op: Plus,
                            right: {
                              kind: Name,
                              id: y,
                            },
                          },
                          hasParens: true,
                          params: [
                            {
                              kind: FormalParameter,
                              ellipsisAnnotations: [
                              ],
                              id: {
                                kind: VariableDeclaratorId,
                                dims: [
                                ],
                                name: x,
                              },
                              isReceiver: false,
                              isVarArgs: false,
                              modifiers: [
                              ],
                              receiverTypeName: null,
                              type: {
                                kind: UnknownType,
                              },
                            },
                            {
                              kind: FormalParameter,
                              ellipsisAnnotations: [
                              ],
                              id: {
                                kind: VariableDeclaratorId,
                                dims: [
                                ],
                                name: y,
                              },
                              isReceiver: false,
                              isVarArgs: false,
                              modifiers: [
                              ],
                              receiverTypeName: null,
                              type: {
                                kind: UnknownType,
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: F2,
                      scope: null,
                      typeArgs: [
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                      ],
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: f4,
                        },
                        init: {
                          kind: LambdaExpr,
                          body: {
                            kind: BinaryExpr,
                            left: {
                              kind: Name,
                              id: x,
                            },
                            op: Plus,
                            right: {
                              kind: Name,
                              id: y,
                            },
                          },
                          hasParens: true,
                          params: [
                            {
                              kind: FormalParameter,
                              ellipsisAnnotations: [
                              ],
                              id: {
                                kind: VariableDeclaratorId,
                                dims: [
                                ],
                                name: x,
                              },
                              isReceiver: false,
                              isVarArgs: false,
                              modifiers: [
                              ],
                              receiverTypeName: null,
                              type: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: String,
                                scope: null,
                                typeArgs: null,
                              },
                            },
                            {
                              kind: FormalParameter,
                              ellipsisAnnotations: [
                              ],
                              id: {
                                kind: VariableDeclaratorId,
                                dims: [
                                ],
                                name: y,
                              },
                              isReceiver: false,
                              isVarArgs: false,
                              modifiers: [
                              ],
                              receiverTypeName: null,
                              type: {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: String,
                                scope: null,
                                typeArgs: null,
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: F2,
                      scope: null,
                      typeArgs: [
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                      ],
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: f5,
                        },
                        init: {
                          kind: CastExpr,
                          expr: {
                            kind: LambdaExpr,
                            body: {
                              kind: BinaryExpr,
                              left: {
                                kind: Name,
                                id: x,
                              },
                              op: Plus,
                              right: {
                                kind: Name,
                                id: y,
                              },
                            },
                            hasParens: true,
                            params: [
                              {
                                kind: FormalParameter,
                                ellipsisAnnotations: [
                                ],
                                id: {
                                  kind: VariableDeclaratorId,
                                  dims: [
                                  ],
                                  name: x,
                                },
                                isReceiver: false,
                                isVarArgs: false,
                                modifiers: [
                                ],
                                receiverTypeName: null,
                                type: {
                                  kind: QualifiedType,
                                  annotations: [
                                  ],
                                  name: String,
                                  scope: null,
                                  typeArgs: null,
                                },
                              },
                              {
                                kind: FormalParameter,
                                ellipsisAnnotations: [
                                ],
                                id: {
                                  kind: VariableDeclaratorId,
                                  dims: [
                                  ],
                                  name: y,
                                },
                                isReceiver: false,
                                isVarArgs: false,
                                modifiers: [
                                ],
                                receiverTypeName: null,
                                type: {
                                  kind: QualifiedType,
                                  annotations: [
                                  ],
                                  name: String,
                                  scope: null,
                                  typeArgs: null,
                                },
                              },
                            ],
                          },
                          type: {
                            kind: QualifiedType,
                            annotations: [
                            ],
                            name: F2,
                            scope: null,
                            typeArgs: [
                              {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: String,
                                scope: null,
                                typeArgs: null,
                              },
                              {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: String,
                                scope: null,
                                typeArgs: null,
                              },
                              {
                                kind: QualifiedType,
                                annotations: [
                                ],
                                name: String,
                                scope: null,
                                typeArgs: null,
                              },
                            ],
                          },
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: F1,
                      scope: null,
                      typeArgs: [
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: Int,
                          scope: null,
                          typeArgs: null,
                        },
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                      ],
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: toStr,
                        },
                        init: {
                          kind: MethodReferenceExpr,
                          name: toString,
                          scope: {
                            kind: TypeExpr,
                            type: {
                              kind: QualifiedType,
                              annotations: [
                              ],
                              name: Integer,
                              scope: null,
                              typeArgs: null,
                            },
                          },
                          typeArgs: [
                          ],
                        },
                      },
                    ],
                  },
                },
              },
              {
                kind: ExpressionStmt,
                expr: {
                  kind: VariableDeclarationExpr,
                  declaration: {
                    kind: LocalVariableDecl,
                    modifiers: [
                    ],
                    type: {
                      kind: QualifiedType,
                      annotations: [
                      ],
                      name: F0,
                      scope: null,
                      typeArgs: [
                        {
                          kind: QualifiedType,
                          annotations: [
                          ],
                          name: String,
                          scope: null,
                          typeArgs: null,
                        },
                      ],
                    },
                    variables: [
                      {
                        kind: VariableDeclarator,
                        id: {
                          kind: VariableDeclaratorId,
                          dims: [
                          ],
                          name: constant1,
                        },
                        init: {
                          kind: LambdaExpr,
                          body: {
                            kind: LiteralExpr,
                            literalClass: java.lang.String,
                            literalString: "Forty Two",
                          },
                          hasParens: true,
                          params: [
                          ],
                        },
                      },
                    ],
                  },
                },
              },
            ],
          },
          dims: [
          ],
          modifiers: [
          ],
          name: method,
          params: [
            {
              kind: FormalParameter,
              ellipsisAnnotations: [
              ],
              id: {
                kind: VariableDeclaratorId,
                dims: [
                ],
                name: object,
              },
              isReceiver: false,
              isVarArgs: false,
              modifiers: [
              ],
              receiverTypeName: null,
              type: {
                kind: QualifiedType,
                annotations: [
                ],
                name: AClassType,
                scope: null,
                typeArgs: null,
              },
            },
          ],
          throwsClause: [
          ],
          type: {
            kind: VoidType,
          },
          typeParams: [
          ],
        },
      ],
      modifiers: [
        {
          kind: SingleMemberAnnotationExpr,
          memberValue: {
            kind: LiteralExpr,
            literalClass: java.lang.Integer,
            literalString: 42,
          },
          name: AnAnnotation,
        },
        {
          kind: NormalAnnotationExpr,
          name: AnAnnotationWithPairs,
          pairs: [
            {
              kind: MemberValuePair,
              name: anIntMember,
              value: {
                kind: LiteralExpr,
                literalClass: java.lang.Integer,
                literalString: 9,
              },
            },
            {
              kind: MemberValuePair,
              name: aStringMember,
              value: {
                kind: LiteralExpr,
                literalClass: java.lang.String,
                literalString: "Nine",
              },
            },
            {
              kind: MemberValuePair,
              name: aStringArrayMember,
              value: {
                kind: ArrayInitializerExpr,
                trailingComma: false,
                values: [
                  {
                    kind: LiteralExpr,
                    literalClass: java.lang.String,
                    literalString: "first",
                  },
                  {
                    kind: LiteralExpr,
                    literalClass: java.lang.String,
                    literalString: "second",
                  },
                ],
              },
            },
          ],
        },
      ],
      name: AnAnnotatedClass,
      typeParams: [
      ],
    },
  ],
}
