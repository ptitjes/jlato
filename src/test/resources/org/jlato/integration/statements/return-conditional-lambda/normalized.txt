{
  kind: ReturnStmt,
  expr: {
    kind: ConditionalExpr,
    condition: {
      kind: ParenthesizedExpr,
      inner: {
        kind: BinaryExpr,
        left: {
          kind: LiteralExpr,
          literalClass: java.lang.Void,
          literalString: null,
        },
        op: Equal,
        right: {
          kind: Name,
          id: targetRef,
        },
      },
    },
    elseExpr: {
      kind: LambdaExpr,
      body: {
        kind: MethodInvocationExpr,
        args: [
          object,
        ],
        name: equals,
        scope: targetRef,
        typeArgs: [
        ],
      },
      hasParens: false,
      params: [
        {
          kind: FormalParameter,
          id: {
            kind: VariableDeclaratorId,
            dims: [
            ],
            name: object,
          },
          isVarArgs: false,
          modifiers: [
          ],
          type: {
            kind: UnknownType,
          },
        },
      ],
    },
    thenExpr: {
      kind: MethodReferenceExpr,
      name: isNull,
      scope: {
        kind: TypeExpr,
        type: {
          kind: QualifiedType,
          annotations: [
          ],
          name: Objects,
          scope: null,
          typeArgs: null,
        },
      },
      typeArgs: [
      ],
    },
  },
}
