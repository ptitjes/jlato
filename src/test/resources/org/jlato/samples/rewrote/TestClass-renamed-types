package org.jlato.tree;

import com.github.andrewoma.dexx.collection.ArrayList;
import com.github.andrewoma.dexx.collection.Builder;
import com.github.andrewoma.dexx.collection.Vector;
import org.jlato.internal.bu.BUTree;
import org.jlato.internal.shapes.LexicalShape;
import org.jlato.internal.td.TDLocation;

public abstract class TestClass {

	protected final TDLocation42 location;

	protected TestClass(TDLocation42 location) {
		this.location = location;
	}

	public Tree42 parent() {
		return location.parent();
	}

	public Tree42 root() {
		return location.root();
	}

	public static BUTree42 treeOf(Tree42 facade) {
		return facade == null ? null : facade.location.tree;
	}

	protected static ArrayList42<BUTree42> treesOf(Tree42... facades) {
		final Builder42<BUTree42, ArrayList42<BUTree42>> builder = ArrayList.<BUTree42>factory().newBuilder();
		for (Tree42 facade : facades) {
			builder.add(treeOf(facade));
		}
		return builder.build();
	}

	protected static ArrayList42<Object42> dataOf(Object42... attributes) {
		final Builder42<Object42, ArrayList42<Object42>> builder = ArrayList.factory().newBuilder();
		for (Object42 attribute : attributes) {
			builder.add(attribute);
		}
		return builder.build();
	}

	protected static Vector42<BUTree42> treeListOf(Tree42... facades) {
		final Builder42<BUTree42, Vector42<BUTree42>> builder = Vector.<BUTree42>factory().newBuilder();
		for (Tree42 facade : facades) {
			builder.add(treeOf(facade));
		}
		return builder.build();
	}

	public interface Kind {

		Tree42 instantiate(TDLocation42 location);

		LexicalShape42 shape();
	}
}
